{
    "docs": [
        {
            "location": "/index.html", 
            "text": "Seos Mobile SDK for Android Overview\n\n\nNew to the SDK? Go to the \ngetting started section\n\n\nThis document is a quick start guide to integrating Mobile Credentials in an application using the ASSA ABLOY Seos Mobile SDK for Android version 6.x.\nIt explains some of the basic uses of the SDK, and contains a few code samples to get started.\n\n\nThe SDK is divided into three main areas:\n\n\n\n\nSeos TSM integration. Handles installation and configuration of Seos, issuing and revocation of keys, etc.\n\n\nInteraction with the installed Seos instance. Listing keys, reading key data, etc.\n\n\nCommunication with readers, either over Bluetooth or HCE.\n\n\n\n\nThe Seos eco system is rather complex, and the SDK is constantly evolving. Depending on the type of TSM used by the backend, the type of phone and the type of secure element, the underlying process of installing and managing Seos might differ. \nThe goal of the SDK is to hide that complexity from the integrator and provide a uniform API independent of\nthe underlying implementation.\n\n\n\n\nThird party licenses\n\n\n\n\n\n\n\n\nLibrary\n\n\nLicense\n\n\n\n\n\n\n\n\n\n\nBouncy Castle\n\n\nhttps://www.bouncycastle.org/license.html\n\n\n\n\n\n\nGson\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\n\n\n\n\nSLF4J\n\n\nhttp://www.slf4j.org/license.html\n\n\n\n\n\n\nOkHttp\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\n\n\n\n\nMixpanel\n\n\nhttps://github.com/mixpanel/mixpanel-android/blob/master/LICENSE", 
            "title": "Home"
        }, 
        {
            "location": "/index.html#seos-mobile-sdk-for-android-overview", 
            "text": "New to the SDK? Go to the  getting started section  This document is a quick start guide to integrating Mobile Credentials in an application using the ASSA ABLOY Seos Mobile SDK for Android version 6.x.\nIt explains some of the basic uses of the SDK, and contains a few code samples to get started.  The SDK is divided into three main areas:   Seos TSM integration. Handles installation and configuration of Seos, issuing and revocation of keys, etc.  Interaction with the installed Seos instance. Listing keys, reading key data, etc.  Communication with readers, either over Bluetooth or HCE.   The Seos eco system is rather complex, and the SDK is constantly evolving. Depending on the type of TSM used by the backend, the type of phone and the type of secure element, the underlying process of installing and managing Seos might differ. \nThe goal of the SDK is to hide that complexity from the integrator and provide a uniform API independent of\nthe underlying implementation.", 
            "title": "Seos Mobile SDK for Android Overview"
        }, 
        {
            "location": "/index.html#third-party-licenses", 
            "text": "Library  License      Bouncy Castle  https://www.bouncycastle.org/license.html    Gson  http://www.apache.org/licenses/LICENSE-2.0    SLF4J  http://www.slf4j.org/license.html    OkHttp  http://www.apache.org/licenses/LICENSE-2.0    Mixpanel  https://github.com/mixpanel/mixpanel-android/blob/master/LICENSE", 
            "title": "Third party licenses"
        }, 
        {
            "location": "/getting-started/getting-started/index.html", 
            "text": "Android library\n\n\nThe SDK is provided as a single Android library (.aar) file. The SDK file comes in two variants. The one with the \n-debug\n suffix is intended to be used during development.\nThe production version of the .aar, with the \n-release\n suffix, contains anti-tampering guards, one of them crashes the application if a debugger is connected. To be able to debug applications during development a \n-debug\n version is therefore provided.\nMake sure to switch implementation before publishing your application!\n\n\nIn your apps \nbuild.gradle\n file:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nrepositories\n \n{\n\n    \nflatDir\n \n{\n\n        \ndirs\n \nlibs\n\n    \n}\n\n\n//...\n\n\n}\n\n\n//...\n\n\ndependencies\n \n{\n\n  \n//aar file from libs dir. Name and version is from the filename.\n\n  \ndebugImplementation\n \nname:\n \nmobilekeys-android-sdk-debug\n,\n \nversion:\n \nx.x.x\n,\n \next:\n \naar\n\n  \nreleaseImplementation\n \nname:\n \nmobilekeys-android-sdk-release\n,\n \nversion:\n \nx.x.x\n,\n \next:\n \naar\n\n  \n// Seos Mobile SDK transistive dependencies\n\n  \nimplementation\n \norg.bouncycastle:bcprov-jdk15on:1.58\n\n  \nimplementation\n \ncom.google.code.gson:gson:2.2.2\n\n  \nimplementation\n \norg.slf4j:slf4j-api:1.7.7\n\n  \nimplementation\n \ncom.squareup.okhttp3:okhttp:3.9.1\n\n  \nimplementation\n \ncom.mixpanel.android:mixpanel-android:4.8.7@aar\n\n  \n//Enable logging from Seos Mobile SDK\n\n  \nimplementation\n \norg.slf4j:slf4j-android:1.7.7\n\n  \n//...\n\n\n}\n\n\n\n\n\n\n\nBack Up User Data/Auto Backup\n\n\nThe Seos Mobile Android SDK is storing encrypted, non-transferable data on the device. Using the Auto Backup functionality\nprovided by default in Android 6.0 (API level 23) and later is therefore not supported. The easiest way to disable it is \nby putting the following in your AndroidManifest.xml \n\n\n1\n2\n3\n4\n5\n6\nmanifest\n \n...\n \n\n    ...\n    \napplication\n \nandroid:allowBackup=\nfalse\n \n...\n \n\n        ...\n    \n/application\n\n\n/manifest\n\n\n\n\n\n\n\nIf your application targets Android 6.0 (API level 23) \nandroid:allowBackup\n will default to \ntrue\n, so you will need to \nset the above explicitly.\n\n\nEnabling Auto Backup\n\n\nIf you need to enable Auto Backup for your application you need to make certain adjustments to your app configuration. \nAs of Seos Mobile SDK 6.5.1 this is done automatically by the SDK, but if you are using an earlier version, or if \nyou need to exclude other files from being backed up, you need to manually specify all of them.\n\n\nThis is done by following the instructions on \nhttps://developer.android.com/guide/topics/data/autobackup.html#IncludingFiles\n\n\nYour fullBackupContent resource \nmust\n exclude the following files:  \n\n\n1\n2\n3\n4\n5\n6\n7\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nfull-backup-content\n\n    \nexclude\n \ndomain=\nsharedpref\n \npath=\nsoft-se.xml\n/\n\n    \nexclude\n \ndomain=\nsharedpref\n \npath=\nmobileKeysProperties.xml\n/\n\n    \n!--\nexclude domain=\nsharedpref\n path=\nYOUR_OWN_FILE.xml\n/\n--\n\n\n\n/full-backup-content\n\n\n\n\n\n\n\nThis will exclude the non-transferable data created by the SDK from the backup, while still backing up other data created by the app.\n\n\nA note on different phone models\n\n\nThe measured RSSI Values could differ between different phone model, BLE chipsets, phone antennas, and phone firmwares.\n\n\nOn certain phones, NFC is configured to use the SIM card only. One example is certain Samsung phones after upgrading them to Android 5.x. On these phones, the NFC processing method needs to be changed to \"Android\" instead of SIM for HCE to work.\n\n\nMobile keys API\n\n\nThe main class in the SDK is the \ncom.assaabloy.mobilekeys.api.MobileKeysApi\n. It provides a centralized entry point for the seos mobile integration. \n\n\nThe \nMobileKeysApi\n contains three parts:\n\n\n\n\ncom.assaabloy.mobilekeys.api.MobileKeys\n facade is responsible for both Seos TSM communication and Seos secure element functionality.\n\n\ncom.assaabloy.mobilekeys.api.ReaderConnectionController\n is used for controlling the Bluetooth and NFC reader communication.\n\n\ncom.assaabloy.mobilekeys.api.DeviceEligibility\n contains device specific configurations and information about working/non working features.\n\n\n\n\nInitializing the API\n\n\nThe \nMobileKeysApi\n interface is obtained via the \n.getInstance()\n method but in order to access \nMobileKeys\n and \nReaderConnectionController\n interface the API needs to be initialized.\n\n\nThe API is initialized via the \n.initialize(Context context, ApiConfiguration apiConfig, ScanConfiguration scanConfig)\n method.\nMake sure that the API isn't already initialized by calling \n.isInitialized()\n.\n\n\nSeos TSM integration\n\n\nThere are five methods in the API to handle Seos TSM integration located in the \ncom.assaabloy.mobilekeys.api.MobileKeys\n interface.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n    \npublic\n \ninterface\n \nMobileKeys\n\n    \n{\n\n        \nvoid\n \napplicationStartup\n(\nMobileKeysCallback\n \nmobileKeysCallback\n,\n \nApplicationProperty\n...\n \napplicationProperties\n);\n\n\n        \nvoid\n \nendpointSetup\n(\nMobileKeysCallback\n \nmobileKeysCallback\n,\n \nString\n \nactivationCode\n,\n \nApplicationProperty\n...\n \napplicationProperties\n);\n\n\n        \nvoid\n \nendpointUpdate\n(\nMobileKeysCallback\n \nmobileKeysCallback\n);\n\n\n        \nboolean\n \nisEndpointSetupComplete\n()\n \nthrows\n \nMobileKeysException\n;\n\n\n        \nvoid\n \nunregisterEndpoint\n(\nMobileKeysCallback\n \nmobileKeysCallback\n);\n\n\n        \n//...\n\n    \n}\n\n\n\n\n\n\n\napplicationStartup(...)\n, \nendpointUpdate(...)\n, \nendpointSetup(...)\nare time consuming operations. \nThey will be executed asynchronously on a background thread and the result will be delivered to the calling application via the\n\ncom.assaabloy.mobilekeys.api.MobileKeysCallback\n instance given as the first parameter. There is a subclass of the callback interface,\n\ncom.assaabloy.mobilekeys.api.MobileKeysProgressCallback\n, which has an additional method sending progress events during a setup or update.\nThere is no way of telling how many events will come before the setup/update is finished, so this information can't\nbe used for filling a progress bar, but it could be used for giving the user some other form of feedback.\nThe call that takes the most time is the endpoint setup. This process could take between a few seconds up to\nabout a minute. For that reason it's important to give the user feedback during the process and set the user's\nexpectations before the process is started, otherwise the user might think the application is not responding.\n\n\nApplication startup\n\n\nThe application startup method should, as the name implies, be called during the startup phase of your application.\nThis method will make sure that the phone is in sync with the Seos TSM server. It will:\n\n\n\n\nSend properties about the installation to the Seos TSM, e.g. version of the Mobile SDK or Android OS. The SDK\nwill detect when a property has changed and only perform update if necessary.\n\n\nDetect interrupted communication with the Seos TSM and try to resume. \n\n\n\n\nNormally server communication should not\nbe interrupted but in case of an application crash or memory issues on the phone, shutting down the application,\nthe SDK persists outgoing messages to the Seos TSM. In case there is a message pending during application\nstartup it will be sent to the Seos TSM. This process might take a bit of time, since the message might\ntrigger a response from the server requiring more actions on the phone side and so on.\n\n\nThis is generally a fast operation, since it will require no communication with the Seos TSM, but might sometimes\ntake a bit more time if Seos TSM interaction is needed. The calling application needs to handle the fact that\nthis call might take some time before it's finished.\n\n\nEndpoint setup\n\n\nAn endpoint, a Seos instance in a secure element, has to be installed and personalized before it can be used to open\nlocks.\nThe first thing a application has to do is to check if the endpoint setup on this device is completed (using\nthe \ncom.assaabloy.mobilekeys.api.MobileKeys.isEndpointSetupComplete()\n method).\nIf not, the application needs to call \ncom.assaabloy.mobilekeys.api.MobileKeys.endpointSetup(MobileKeysCallback, String, ApplicationProperty...)\n and wait for the process to finish.\n\n\nAs part of the user sign-up process the end user will be given an activation code. This code will be used to\nidentify the endpoint in the Seos TSM, and will also be used to secure the setup process. The code is four times\nfour alphanumerical characters separated by a dash, i.e. \nXXXX-XXXX-XXXX-XXXX\n. This code (given as a string in the\nformat described above) is a required parameter to the endpoint setup method.\n\n\nIf the user is already authenticated eg. using a backend server outside the TSM environment there is no need to send\nthe code to the user. Instead, the application can retrieve the invitation code from the backend server and feed it\ndirectly to the setup method in the SDK. Thus the user would be transparently enrolled.\n\n\nNote that the endpoint setup includes multiple roundtrips between the SDK and the Seos TSM. This might fail on\na mobile data network. The application can re-try calling endpoint setup at a later time, when the phone has a\nstable network connection, with the same activation code. The only exception is if the SDK report an error with\nerror code \ncom.assaabloy.mobilekeys.api.MobileKeysApiErrorCode.DEVICE_SETUP_FAILED\n. This means that the setup failed in a critical phase\nof the setup and, for security reasons, the application has to start over with a new activation code.\n\n\nContent updates\n\n\nNew keys, revocation of keys, etc. will be delivered to the phone from the Seos TSM. In order to download and\nprocess those updates, the application needs to call \ncom.assaabloy.mobilekeys.api.MobileKeys.endpointUpdate(MobileKeysCallback)\n.\nThe application could do this update every time it is launched, or the application backend could use some kind of push\nmechanism to tell the application when an update is available.\n\n\nTalking to Seos in the secure element\n\n\nThe \ncom.assaabloy.mobilekeys.api.MobileKeys\n interface contains functionality to talk to Seos that will cover the most\ncommon use cases. For the more advanced use cases you can use the Seos Access API.\nThe Seos Access API provides a high level Java API for integrating with the Seos Card Technology.\nPlease refer to it's documentation about how to use it.\nDue to the single threaded nature of most secure elements the MobileKeys implementation will make sure\nthat only one task is performed at a time, i.e. one current request to list keys or one time consuming Seos TSM request.\nIf there is already a request processing or a Seos TSM task running, a\n\ncom.assaabloy.mobilekeys.api.MobileKeysException\n with the error code \nAPI_IS_BUSY\n will be thrown.\n\n\nListing issued keys\n\n\nRetrieve a list of MobileKey objects representing all keys issued to this secure element using the \nlistMobileKeys()\n\nmethod. \nEach mobile key holds metadata about the key, like label, valid from/to dates, etc. If an application needs\nmore information about the key, the metadata field \"configuration URL\" could be used to fetch more information from\na remote server. E.g. in our reference application we point this URL to a XML document describing key card layout,\nbackground image, font size and color etc.\n\n\nReading metadata about Seos\n\n\nThe \ngetEndpointInfo()\n method provides metadata about the Seos installation. See \ncom.assaabloy.mobilekeys.api.EndpointInfo\n for more\ndetails about available data. This data is typically not useful for an end user but could be helpful for a support\ntechnician. \nWe therefore encourage integrators to make this information available in some kind of help, support or\nabout screen.\n\n\nObserving changes\n\n\nIt is possible to listen to keys and endpoint changes in the SDK by adding listeners to the \ncom.assaabloy.mobilekeys.api.MobileKeys\n interface.\n\n\nBluetooth reader integration\n\n\nThe phone communicates to Bluetooth readers using Bluetooth Low Energy (also known as Bluetooth LE, BLE or Bluetooth\nSmart).\n\n\nBluetooth LE was released as part of the Bluetooth 4.0 Core Specification, and Android support was first\nreleased as part of Android 4.3. The Android 5.0 release significantly improved the Bluetooth LE support in Android,\nwith e.g. less power consumption and support for scanning with screen off. With the increased user integrity and privacy of\nAndroid 6.0 Bluetooth LE scanning now requires location permissions.\n\n\nThe Bluetooth implementation is hidden behind the \ncom.assaabloy.mobilekeys.api.ReaderConnectionController\n interface.\nAs an integrator you need to verify that the application supports Bluetooth before scanning. For this purpose you can use the \n\nBluetoothSupportHelper\n class in the in the SDK that helps you check if a device has the features required to be used with Bluetooth readers.\n\n\nThe Bluetooth service will handle discovering readers and start an opening sequence when appropriate.\nTo start scanning the service needs the configuration parameters described below.\nDue to battery consumption issues in Android 4.3 and 4.4, on these devices scanning is only performed when the phone screen is on. The service will automatically detect\nscreen on/off events and stop/start scanning accordingly.\nOn Android 5.0+ devices scanning will continue even when the phone screen is off.\nThe user might experience a performance drop for proximity and seamless modes, as the Android OS automatically slows down scanning to save power when the screen is off.\n\n\nBLE configuration\n\n\nWhen starting scanning in the BLE service you need to provide a \nScanConfiguration\n instance. The scan configuration\ncontains the following parameters.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nLock service code(s)\n\n\nBluetooth readers advertise a UUID (universally unique identifier) identifying this BLE device as a reader.\n\n\n\n\n\n\n\n\nThe lock service code is part of that UUID. The UUID might differ between different types of readers.\n\n\n\n\n\n\n\n\nConsult with your lock provider to receive the service code used by the reader you want to integrate to.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRSSI sensitivity\n\n\nRSSI values are used to calculate distance to a reader. These values differ between different phone\n\n\n\n\n\n\n\n\nmanufacturers, models and even individual phones. On a device where e.g. the proximity mode works poorly and\n\n\n\n\n\n\n\n\nthe user would have to almost touch the reader with his phone, the signal can be boosted by specifying\n\n\n\n\n\n\n\n\nRssiSensitivity.HIGH, and if the device opens a lock at too long range, you would use RssiSensitivity.LOW.\n\n\n\n\n\n\n\n\nTo use the RSSI values received from the lock, without modifications, specify RssiSensitivity.NORMAL.\n\n\n\n\n\n\n\n\nThis could be presented as a setting for the user, or tuned as part of some kind of automatic process.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nScan mode (optional)\n\n\nMode to indicate to the SDK if the application wants to prioritize power consumption or performance\n\n\n\n\n\n\n\n\nwhen scanning for BLE readers. The scan mode setting only works in Android 5.0, and will be ignored\n\n\n\n\n\n\n\n\non 4.3 and 4.4 devices. The default setting is to prioritize the power consumption.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBLE opening triggers\n\n\nList of opening trigger implementations that the application wants to enable. The SDK provides three\n\n\n\n\n\n\n\n\nimplementations: Twist and Go, Proximity and Seamless. Use the utility method\n\n\n\n\n\n\n\n\nScanConfiguration.providedOpeningMethods(...)\n if you are only interested in using implementations\n\n\n\n\n\n\n\n\nprovided by the SDK.\n\n\n\n\n\n\n\n\nTo change configuration parameters once the scanning is started all you need to do is update the \nScanConfiguration\n instance with new configuration parameters.\n\n\nOpening modes\n\n\nThere are several types of opening modes supported by a Bluetooth reader. A reader can be configured to support one\nor more of these opening modes. Support for more opening modes are planned for future releases of the SDK. The modes\ncurrently supported are:\n\n\n\n\nProximity\n. The phone behaves like an access card or tag, e.g. you have to hold the phone within close proximity\nto the reader.\n\n\nSeamless\n. Opens the lock as the user approaches. This obviously works best with Android 5.0 as the user\nis not required to power on the screen, but could be used with older models as well with the restriction that\nthe user has to power on his screen. Seamless is not suitable for all readers and environments, consult with\nyour reader provider for more details.\n\n\nTwist and Go\n. The user turns the phone 90 degrees in one direction and then back again. This will open\nthe closest reader within range.\n\n\n\n\nTo implement custom opening mode look at the documentation on (\ncom.assaabloy.mobilekeys.api.ble.OpeningTrigger\n).\nThe \nReaderConnectionController\n also supports manual opening but the underlying mechanism still relies on opening triggers.\n\n\nReader connection callbacks\n\n\nCallbacks are delivered to the implementing application via the \ncom.assaabloy.mobilekeys.api.ble.ReaderConnectionCallback\n interface.\nThe Bluetooth LE service will notify the connection listener when a reader connection is opened, closed or has failed. These methods are\ntypically used to give the user feedback, using sound, vibration or UI.\nPlease not that in some failure cases the Reader parameter in the callback might be null, e.g. when the user\nperformed an open motion with no readers within range.\nSee the javadoc for the \ncom.assaabloy.mobilekeys.api.ble.ReaderConnectionCallback\n and related classes for more details on how to register for and handle callbacks.\n\n\nLimitations\n\n\nA Bluetooth LE reader can only make one connection at a time. So when two apps simultaneously try to open using bluetooth; opening will be very slow.\n\n\nHost-based Card Emulation (NFC)\n\n\nAndroid 4.4 introduced a way for an Android device to emulate a contactless card using NFC. This feature is referred\nto as Host-based Card Emulation (HCE). Full documentation of this feature can be found in the Android API guides.\n\n\nThe SDK contains a service implementing HCE. The service is disabled by default but can be enabled and disabled using the \n\ncom.assaabloy.mobilekeys.api.ReaderConnectionController\n.\n\n\nTo configure the HCE service you need to be assigned an AID by ASSA ABLOY.\nWhen you have received an AID you have to create an \nseos_hce_service.xml\n file, add your HCE AID, and provide it as a resource.\n\n\nHCE configuration file \nres/xml/seos_hce_service.xml\n:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nhost-apdu-service\n \nxmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n      \nandroid:description=\n@string/seos_hce_description\n\n      \nandroid:requireDeviceUnlock=\nfalse\n\n    \naid-group\n \nandroid:description=\n@string/seos_hce_aid_description\n \nandroid:category=\nother\n\n        \n!-- Specify your AID here, will be assigned to you by ASSA ABLOY! --\n\n        \naid-filter\n \nandroid:name=\n...\n/\n\n    \n/aid-group\n\n\n/host-apdu-service\n\n\n\n\n\n\n\nReader connection callbacks\n\n\nCallbacks are delivered to the implementing application via the \ncom.assaabloy.mobilekeys.api.hce.HceConnectionCallback\n interface.\nThe HCE service will notify the connection listener when a reader connection is opened, closed or has failed. These methods are\ntypically used to give the user feedback, using sound, vibration or UI.\nSee the javadoc for the \ncom.assaabloy.mobilekeys.api.hce.HceConnectionCallback\n and related classes for more details on how to register for and handle callbacks.\n\n\nLimitations\n\n\nThe OS selects the HCE service is based on AID. If the device have several applications implementing the same AID, the user\nwill either be prompted to select the application to use or the system will choose the default application. To avoid the prompt:\nmake sure to register com.assaabloy.mobilekeys.api.hce.HceService` as preferred service.\n\n\nTo make the \nHceService\n work in background you have to make sure that the \nMobileKeysApi\n is initialized. \nThis can be achieved by extending the the Android application and initialize the \nMobileKeysApi\n in the \nonCreate()\n callback.\n\n\nDevice eligibility\n\n\nVersion 5.2 of the SDK introduced a way to check eligibility of the device the SDK is running on.\nThe \ncom.assaabloy.mobilekeys.api.DeviceEligibility\n contains information about working/non working features for the device.\nIt also contains recommended RSSI settings for the device. This feature should be used before initializing the API and could\nbe used to customize the user experience, e.g. turning off NFC on devices where NFC is known to fail.\n\n\nDevice Status\n\n\nThe class \ncom.assaabloy.mobilekeys.api.util.DeviceStatus\n contains information about the Device's current status in regards to BLE and NFC.\nIt can be asked about permissions, system supported features, and other things.", 
            "title": "Getting started with the SDK"
        }, 
        {
            "location": "/getting-started/getting-started/index.html#android-library", 
            "text": "The SDK is provided as a single Android library (.aar) file. The SDK file comes in two variants. The one with the  -debug  suffix is intended to be used during development.\nThe production version of the .aar, with the  -release  suffix, contains anti-tampering guards, one of them crashes the application if a debugger is connected. To be able to debug applications during development a  -debug  version is therefore provided.\nMake sure to switch implementation before publishing your application!  In your apps  build.gradle  file:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 repositories   { \n     flatDir   { \n         dirs   libs \n     }  //...  }  //...  dependencies   { \n   //aar file from libs dir. Name and version is from the filename. \n   debugImplementation   name:   mobilekeys-android-sdk-debug ,   version:   x.x.x ,   ext:   aar \n   releaseImplementation   name:   mobilekeys-android-sdk-release ,   version:   x.x.x ,   ext:   aar \n   // Seos Mobile SDK transistive dependencies \n   implementation   org.bouncycastle:bcprov-jdk15on:1.58 \n   implementation   com.google.code.gson:gson:2.2.2 \n   implementation   org.slf4j:slf4j-api:1.7.7 \n   implementation   com.squareup.okhttp3:okhttp:3.9.1 \n   implementation   com.mixpanel.android:mixpanel-android:4.8.7@aar \n   //Enable logging from Seos Mobile SDK \n   implementation   org.slf4j:slf4j-android:1.7.7 \n   //...  }", 
            "title": "Android library"
        }, 
        {
            "location": "/getting-started/getting-started/index.html#back-up-user-dataauto-backup", 
            "text": "The Seos Mobile Android SDK is storing encrypted, non-transferable data on the device. Using the Auto Backup functionality\nprovided by default in Android 6.0 (API level 23) and later is therefore not supported. The easiest way to disable it is \nby putting the following in your AndroidManifest.xml   1\n2\n3\n4\n5\n6 manifest   ...   \n    ...\n     application   android:allowBackup= false   ...   \n        ...\n     /application  /manifest    If your application targets Android 6.0 (API level 23)  android:allowBackup  will default to  true , so you will need to \nset the above explicitly.", 
            "title": "Back Up User Data/Auto Backup"
        }, 
        {
            "location": "/getting-started/getting-started/index.html#enabling-auto-backup", 
            "text": "If you need to enable Auto Backup for your application you need to make certain adjustments to your app configuration. \nAs of Seos Mobile SDK 6.5.1 this is done automatically by the SDK, but if you are using an earlier version, or if \nyou need to exclude other files from being backed up, you need to manually specify all of them.  This is done by following the instructions on  https://developer.android.com/guide/topics/data/autobackup.html#IncludingFiles  Your fullBackupContent resource  must  exclude the following files:    1\n2\n3\n4\n5\n6\n7 ?xml version= 1.0  encoding= utf-8 ?  full-backup-content \n     exclude   domain= sharedpref   path= soft-se.xml / \n     exclude   domain= sharedpref   path= mobileKeysProperties.xml / \n     !-- exclude domain= sharedpref  path= YOUR_OWN_FILE.xml / --  /full-backup-content    This will exclude the non-transferable data created by the SDK from the backup, while still backing up other data created by the app.", 
            "title": "Enabling Auto Backup"
        }, 
        {
            "location": "/getting-started/getting-started/index.html#a-note-on-different-phone-models", 
            "text": "The measured RSSI Values could differ between different phone model, BLE chipsets, phone antennas, and phone firmwares.  On certain phones, NFC is configured to use the SIM card only. One example is certain Samsung phones after upgrading them to Android 5.x. On these phones, the NFC processing method needs to be changed to \"Android\" instead of SIM for HCE to work.", 
            "title": "A note on different phone models"
        }, 
        {
            "location": "/getting-started/getting-started/index.html#mobile-keys-api", 
            "text": "The main class in the SDK is the  com.assaabloy.mobilekeys.api.MobileKeysApi . It provides a centralized entry point for the seos mobile integration.   The  MobileKeysApi  contains three parts:   com.assaabloy.mobilekeys.api.MobileKeys  facade is responsible for both Seos TSM communication and Seos secure element functionality.  com.assaabloy.mobilekeys.api.ReaderConnectionController  is used for controlling the Bluetooth and NFC reader communication.  com.assaabloy.mobilekeys.api.DeviceEligibility  contains device specific configurations and information about working/non working features.", 
            "title": "Mobile keys API"
        }, 
        {
            "location": "/getting-started/getting-started/index.html#initializing-the-api", 
            "text": "The  MobileKeysApi  interface is obtained via the  .getInstance()  method but in order to access  MobileKeys  and  ReaderConnectionController  interface the API needs to be initialized.  The API is initialized via the  .initialize(Context context, ApiConfiguration apiConfig, ScanConfiguration scanConfig)  method.\nMake sure that the API isn't already initialized by calling  .isInitialized() .", 
            "title": "Initializing the API"
        }, 
        {
            "location": "/getting-started/getting-started/index.html#seos-tsm-integration", 
            "text": "There are five methods in the API to handle Seos TSM integration located in the  com.assaabloy.mobilekeys.api.MobileKeys  interface.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14      public   interface   MobileKeys \n     { \n         void   applicationStartup ( MobileKeysCallback   mobileKeysCallback ,   ApplicationProperty ...   applicationProperties ); \n\n         void   endpointSetup ( MobileKeysCallback   mobileKeysCallback ,   String   activationCode ,   ApplicationProperty ...   applicationProperties ); \n\n         void   endpointUpdate ( MobileKeysCallback   mobileKeysCallback ); \n\n         boolean   isEndpointSetupComplete ()   throws   MobileKeysException ; \n\n         void   unregisterEndpoint ( MobileKeysCallback   mobileKeysCallback ); \n\n         //... \n     }    applicationStartup(...) ,  endpointUpdate(...) ,  endpointSetup(...) are time consuming operations. \nThey will be executed asynchronously on a background thread and the result will be delivered to the calling application via the com.assaabloy.mobilekeys.api.MobileKeysCallback  instance given as the first parameter. There is a subclass of the callback interface, com.assaabloy.mobilekeys.api.MobileKeysProgressCallback , which has an additional method sending progress events during a setup or update.\nThere is no way of telling how many events will come before the setup/update is finished, so this information can't\nbe used for filling a progress bar, but it could be used for giving the user some other form of feedback.\nThe call that takes the most time is the endpoint setup. This process could take between a few seconds up to\nabout a minute. For that reason it's important to give the user feedback during the process and set the user's\nexpectations before the process is started, otherwise the user might think the application is not responding.", 
            "title": "Seos TSM integration"
        }, 
        {
            "location": "/getting-started/getting-started/index.html#application-startup", 
            "text": "The application startup method should, as the name implies, be called during the startup phase of your application.\nThis method will make sure that the phone is in sync with the Seos TSM server. It will:   Send properties about the installation to the Seos TSM, e.g. version of the Mobile SDK or Android OS. The SDK\nwill detect when a property has changed and only perform update if necessary.  Detect interrupted communication with the Seos TSM and try to resume.    Normally server communication should not\nbe interrupted but in case of an application crash or memory issues on the phone, shutting down the application,\nthe SDK persists outgoing messages to the Seos TSM. In case there is a message pending during application\nstartup it will be sent to the Seos TSM. This process might take a bit of time, since the message might\ntrigger a response from the server requiring more actions on the phone side and so on.  This is generally a fast operation, since it will require no communication with the Seos TSM, but might sometimes\ntake a bit more time if Seos TSM interaction is needed. The calling application needs to handle the fact that\nthis call might take some time before it's finished.", 
            "title": "Application startup"
        }, 
        {
            "location": "/getting-started/getting-started/index.html#endpoint-setup", 
            "text": "An endpoint, a Seos instance in a secure element, has to be installed and personalized before it can be used to open\nlocks.\nThe first thing a application has to do is to check if the endpoint setup on this device is completed (using\nthe  com.assaabloy.mobilekeys.api.MobileKeys.isEndpointSetupComplete()  method).\nIf not, the application needs to call  com.assaabloy.mobilekeys.api.MobileKeys.endpointSetup(MobileKeysCallback, String, ApplicationProperty...)  and wait for the process to finish.  As part of the user sign-up process the end user will be given an activation code. This code will be used to\nidentify the endpoint in the Seos TSM, and will also be used to secure the setup process. The code is four times\nfour alphanumerical characters separated by a dash, i.e.  XXXX-XXXX-XXXX-XXXX . This code (given as a string in the\nformat described above) is a required parameter to the endpoint setup method.  If the user is already authenticated eg. using a backend server outside the TSM environment there is no need to send\nthe code to the user. Instead, the application can retrieve the invitation code from the backend server and feed it\ndirectly to the setup method in the SDK. Thus the user would be transparently enrolled.  Note that the endpoint setup includes multiple roundtrips between the SDK and the Seos TSM. This might fail on\na mobile data network. The application can re-try calling endpoint setup at a later time, when the phone has a\nstable network connection, with the same activation code. The only exception is if the SDK report an error with\nerror code  com.assaabloy.mobilekeys.api.MobileKeysApiErrorCode.DEVICE_SETUP_FAILED . This means that the setup failed in a critical phase\nof the setup and, for security reasons, the application has to start over with a new activation code.", 
            "title": "Endpoint setup"
        }, 
        {
            "location": "/getting-started/getting-started/index.html#content-updates", 
            "text": "New keys, revocation of keys, etc. will be delivered to the phone from the Seos TSM. In order to download and\nprocess those updates, the application needs to call  com.assaabloy.mobilekeys.api.MobileKeys.endpointUpdate(MobileKeysCallback) .\nThe application could do this update every time it is launched, or the application backend could use some kind of push\nmechanism to tell the application when an update is available.", 
            "title": "Content updates"
        }, 
        {
            "location": "/getting-started/getting-started/index.html#talking-to-seos-in-the-secure-element", 
            "text": "The  com.assaabloy.mobilekeys.api.MobileKeys  interface contains functionality to talk to Seos that will cover the most\ncommon use cases. For the more advanced use cases you can use the Seos Access API.\nThe Seos Access API provides a high level Java API for integrating with the Seos Card Technology.\nPlease refer to it's documentation about how to use it.\nDue to the single threaded nature of most secure elements the MobileKeys implementation will make sure\nthat only one task is performed at a time, i.e. one current request to list keys or one time consuming Seos TSM request.\nIf there is already a request processing or a Seos TSM task running, a com.assaabloy.mobilekeys.api.MobileKeysException  with the error code  API_IS_BUSY  will be thrown.", 
            "title": "Talking to Seos in the secure element"
        }, 
        {
            "location": "/getting-started/getting-started/index.html#listing-issued-keys", 
            "text": "Retrieve a list of MobileKey objects representing all keys issued to this secure element using the  listMobileKeys() \nmethod. \nEach mobile key holds metadata about the key, like label, valid from/to dates, etc. If an application needs\nmore information about the key, the metadata field \"configuration URL\" could be used to fetch more information from\na remote server. E.g. in our reference application we point this URL to a XML document describing key card layout,\nbackground image, font size and color etc.", 
            "title": "Listing issued keys"
        }, 
        {
            "location": "/getting-started/getting-started/index.html#reading-metadata-about-seos", 
            "text": "The  getEndpointInfo()  method provides metadata about the Seos installation. See  com.assaabloy.mobilekeys.api.EndpointInfo  for more\ndetails about available data. This data is typically not useful for an end user but could be helpful for a support\ntechnician. \nWe therefore encourage integrators to make this information available in some kind of help, support or\nabout screen.", 
            "title": "Reading metadata about Seos"
        }, 
        {
            "location": "/getting-started/getting-started/index.html#observing-changes", 
            "text": "It is possible to listen to keys and endpoint changes in the SDK by adding listeners to the  com.assaabloy.mobilekeys.api.MobileKeys  interface.", 
            "title": "Observing changes"
        }, 
        {
            "location": "/getting-started/getting-started/index.html#bluetooth-reader-integration", 
            "text": "The phone communicates to Bluetooth readers using Bluetooth Low Energy (also known as Bluetooth LE, BLE or Bluetooth\nSmart).  Bluetooth LE was released as part of the Bluetooth 4.0 Core Specification, and Android support was first\nreleased as part of Android 4.3. The Android 5.0 release significantly improved the Bluetooth LE support in Android,\nwith e.g. less power consumption and support for scanning with screen off. With the increased user integrity and privacy of\nAndroid 6.0 Bluetooth LE scanning now requires location permissions.  The Bluetooth implementation is hidden behind the  com.assaabloy.mobilekeys.api.ReaderConnectionController  interface.\nAs an integrator you need to verify that the application supports Bluetooth before scanning. For this purpose you can use the  BluetoothSupportHelper  class in the in the SDK that helps you check if a device has the features required to be used with Bluetooth readers.  The Bluetooth service will handle discovering readers and start an opening sequence when appropriate.\nTo start scanning the service needs the configuration parameters described below.\nDue to battery consumption issues in Android 4.3 and 4.4, on these devices scanning is only performed when the phone screen is on. The service will automatically detect\nscreen on/off events and stop/start scanning accordingly.\nOn Android 5.0+ devices scanning will continue even when the phone screen is off.\nThe user might experience a performance drop for proximity and seamless modes, as the Android OS automatically slows down scanning to save power when the screen is off.", 
            "title": "Bluetooth reader integration"
        }, 
        {
            "location": "/getting-started/getting-started/index.html#ble-configuration", 
            "text": "When starting scanning in the BLE service you need to provide a  ScanConfiguration  instance. The scan configuration\ncontains the following parameters.     Parameter  Description      Lock service code(s)  Bluetooth readers advertise a UUID (universally unique identifier) identifying this BLE device as a reader.     The lock service code is part of that UUID. The UUID might differ between different types of readers.     Consult with your lock provider to receive the service code used by the reader you want to integrate to.        RSSI sensitivity  RSSI values are used to calculate distance to a reader. These values differ between different phone     manufacturers, models and even individual phones. On a device where e.g. the proximity mode works poorly and     the user would have to almost touch the reader with his phone, the signal can be boosted by specifying     RssiSensitivity.HIGH, and if the device opens a lock at too long range, you would use RssiSensitivity.LOW.     To use the RSSI values received from the lock, without modifications, specify RssiSensitivity.NORMAL.     This could be presented as a setting for the user, or tuned as part of some kind of automatic process.        Scan mode (optional)  Mode to indicate to the SDK if the application wants to prioritize power consumption or performance     when scanning for BLE readers. The scan mode setting only works in Android 5.0, and will be ignored     on 4.3 and 4.4 devices. The default setting is to prioritize the power consumption.        BLE opening triggers  List of opening trigger implementations that the application wants to enable. The SDK provides three     implementations: Twist and Go, Proximity and Seamless. Use the utility method     ScanConfiguration.providedOpeningMethods(...)  if you are only interested in using implementations     provided by the SDK.     To change configuration parameters once the scanning is started all you need to do is update the  ScanConfiguration  instance with new configuration parameters.", 
            "title": "BLE configuration"
        }, 
        {
            "location": "/getting-started/getting-started/index.html#opening-modes", 
            "text": "There are several types of opening modes supported by a Bluetooth reader. A reader can be configured to support one\nor more of these opening modes. Support for more opening modes are planned for future releases of the SDK. The modes\ncurrently supported are:   Proximity . The phone behaves like an access card or tag, e.g. you have to hold the phone within close proximity\nto the reader.  Seamless . Opens the lock as the user approaches. This obviously works best with Android 5.0 as the user\nis not required to power on the screen, but could be used with older models as well with the restriction that\nthe user has to power on his screen. Seamless is not suitable for all readers and environments, consult with\nyour reader provider for more details.  Twist and Go . The user turns the phone 90 degrees in one direction and then back again. This will open\nthe closest reader within range.   To implement custom opening mode look at the documentation on ( com.assaabloy.mobilekeys.api.ble.OpeningTrigger ).\nThe  ReaderConnectionController  also supports manual opening but the underlying mechanism still relies on opening triggers.", 
            "title": "Opening modes"
        }, 
        {
            "location": "/getting-started/getting-started/index.html#reader-connection-callbacks", 
            "text": "Callbacks are delivered to the implementing application via the  com.assaabloy.mobilekeys.api.ble.ReaderConnectionCallback  interface.\nThe Bluetooth LE service will notify the connection listener when a reader connection is opened, closed or has failed. These methods are\ntypically used to give the user feedback, using sound, vibration or UI.\nPlease not that in some failure cases the Reader parameter in the callback might be null, e.g. when the user\nperformed an open motion with no readers within range.\nSee the javadoc for the  com.assaabloy.mobilekeys.api.ble.ReaderConnectionCallback  and related classes for more details on how to register for and handle callbacks.", 
            "title": "Reader connection callbacks"
        }, 
        {
            "location": "/getting-started/getting-started/index.html#limitations", 
            "text": "A Bluetooth LE reader can only make one connection at a time. So when two apps simultaneously try to open using bluetooth; opening will be very slow.", 
            "title": "Limitations"
        }, 
        {
            "location": "/getting-started/getting-started/index.html#host-based-card-emulation-nfc", 
            "text": "Android 4.4 introduced a way for an Android device to emulate a contactless card using NFC. This feature is referred\nto as Host-based Card Emulation (HCE). Full documentation of this feature can be found in the Android API guides.  The SDK contains a service implementing HCE. The service is disabled by default but can be enabled and disabled using the  com.assaabloy.mobilekeys.api.ReaderConnectionController .  To configure the HCE service you need to be assigned an AID by ASSA ABLOY.\nWhen you have received an AID you have to create an  seos_hce_service.xml  file, add your HCE AID, and provide it as a resource.  HCE configuration file  res/xml/seos_hce_service.xml :  1\n2\n3\n4\n5\n6\n7\n8\n9 ?xml version= 1.0  encoding= utf-8 ?  host-apdu-service   xmlns:android= http://schemas.android.com/apk/res/android \n       android:description= @string/seos_hce_description \n       android:requireDeviceUnlock= false \n     aid-group   android:description= @string/seos_hce_aid_description   android:category= other \n         !-- Specify your AID here, will be assigned to you by ASSA ABLOY! -- \n         aid-filter   android:name= ... / \n     /aid-group  /host-apdu-service", 
            "title": "Host-based Card Emulation (NFC)"
        }, 
        {
            "location": "/getting-started/getting-started/index.html#reader-connection-callbacks_1", 
            "text": "Callbacks are delivered to the implementing application via the  com.assaabloy.mobilekeys.api.hce.HceConnectionCallback  interface.\nThe HCE service will notify the connection listener when a reader connection is opened, closed or has failed. These methods are\ntypically used to give the user feedback, using sound, vibration or UI.\nSee the javadoc for the  com.assaabloy.mobilekeys.api.hce.HceConnectionCallback  and related classes for more details on how to register for and handle callbacks.", 
            "title": "Reader connection callbacks"
        }, 
        {
            "location": "/getting-started/getting-started/index.html#limitations_1", 
            "text": "The OS selects the HCE service is based on AID. If the device have several applications implementing the same AID, the user\nwill either be prompted to select the application to use or the system will choose the default application. To avoid the prompt:\nmake sure to register com.assaabloy.mobilekeys.api.hce.HceService` as preferred service.  To make the  HceService  work in background you have to make sure that the  MobileKeysApi  is initialized. \nThis can be achieved by extending the the Android application and initialize the  MobileKeysApi  in the  onCreate()  callback.", 
            "title": "Limitations"
        }, 
        {
            "location": "/getting-started/getting-started/index.html#device-eligibility", 
            "text": "Version 5.2 of the SDK introduced a way to check eligibility of the device the SDK is running on.\nThe  com.assaabloy.mobilekeys.api.DeviceEligibility  contains information about working/non working features for the device.\nIt also contains recommended RSSI settings for the device. This feature should be used before initializing the API and could\nbe used to customize the user experience, e.g. turning off NFC on devices where NFC is known to fail.", 
            "title": "Device eligibility"
        }, 
        {
            "location": "/getting-started/getting-started/index.html#device-status", 
            "text": "The class  com.assaabloy.mobilekeys.api.util.DeviceStatus  contains information about the Device's current status in regards to BLE and NFC.\nIt can be asked about permissions, system supported features, and other things.", 
            "title": "Device Status"
        }, 
        {
            "location": "/getting-started/logging/index.html", 
            "text": "The SDK uses SLF4J, \nSimple Logging Facade for Java\n, to \nprovide logging. The SDK depends on the SLF4J API, the API jar must exist on the\napplication classpath. To enable logging from the SDK classes, simply add a SLF4J\nimplementation to your projects dependencies. If there is no SLF4J implementation\non the application classpath, all logs from the SDK will be suppressed. \n\n\nThere are several open source Android implementations of SLF4J available online.\nIt's also quite easy to write your own implementation if you want full control over\nlog tags etc.\n\n\nLogging is very useful during a development phase, but it's highly recommended \nto disable logging before releasing. Some of the DEBUG and INFO logs from the\nSDK contain sensitive information! Since version 6.6.0, release builds never\nproduce log statements from within the SDK, regardless of project settings.\n\n\nAll logging is disabled for release builds of the SDK. \n\n\nlogback\n\n\nThe SDK does not enable log output per default. SLF4J is dependant on one or more\nlogger implementation available on the classpath. The Seos SDK team recommends\n \nlogback-for-android\n by tony19\n\n\n1\n2\n3\n4\n5\n6\n// Logging in debug builds\n\n\ndebugCompile\n \ncom.github.tony19:logback-android-core:1.1.1-6\n\n\ndebugCompile\n \n(\ncom.github.tony19:logback-android-classic:1.1.1-6\n)\n \n{\n\n  \n// logback-android-classic depends on android.jar, exclude this.\n\n  \nexclude\n \ngroup:\n \ncom.google.android\n,\n \nmodule:\n \nandroid\n\n\n}\n\n\n\n\n\n\n\nAdd this to src/main/assets/logback.xml:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\nconfiguration\n\n  \n!-- log to normal LogCat --\n\n  \nappender\n \nname=\nLOGCAT\n \nclass=\nch.qos.logback.classic.android.LogcatAppender\n\n      \ntagEncoder\n\n          \npattern\n%logger{12}\n/pattern\n\n      \n/tagEncoder\n\n      \nencoder\n\n          \npattern\n%line: %msg%n\n/pattern\n\n      \n/encoder\n\n  \n/appender\n\n\n  \n!-- Write DEBUG (and higher-level) messages to the log --\n\n  \nroot\n \nlevel=\nTRACE\n\n      \nappender-ref\n \nref=\nLOGCAT\n \n/\n\n  \n/root\n\n\n\n/configuration\n\n\n\n\n\n\n\nExtracting log files from the SDK\n\n\nPlease refer to the \nREADME.md\n file in the Seos Mobile SDK for Android Sample\nproject included in the SDK package for how to extract logs from the SDK.", 
            "title": "Logging"
        }, 
        {
            "location": "/getting-started/logging/index.html#logback", 
            "text": "The SDK does not enable log output per default. SLF4J is dependant on one or more\nlogger implementation available on the classpath. The Seos SDK team recommends\n  logback-for-android  by tony19  1\n2\n3\n4\n5\n6 // Logging in debug builds  debugCompile   com.github.tony19:logback-android-core:1.1.1-6  debugCompile   ( com.github.tony19:logback-android-classic:1.1.1-6 )   { \n   // logback-android-classic depends on android.jar, exclude this. \n   exclude   group:   com.google.android ,   module:   android  }    Add this to src/main/assets/logback.xml:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 configuration \n   !-- log to normal LogCat -- \n   appender   name= LOGCAT   class= ch.qos.logback.classic.android.LogcatAppender \n       tagEncoder \n           pattern %logger{12} /pattern \n       /tagEncoder \n       encoder \n           pattern %line: %msg%n /pattern \n       /encoder \n   /appender \n\n   !-- Write DEBUG (and higher-level) messages to the log -- \n   root   level= TRACE \n       appender-ref   ref= LOGCAT   / \n   /root  /configuration", 
            "title": "logback"
        }, 
        {
            "location": "/getting-started/logging/index.html#extracting-log-files-from-the-sdk", 
            "text": "Please refer to the  README.md  file in the Seos Mobile SDK for Android Sample\nproject included in the SDK package for how to extract logs from the SDK.", 
            "title": "Extracting log files from the SDK"
        }, 
        {
            "location": "/getting-started/proguard/index.html", 
            "text": "Proguard is supported using the standard \n\"proguard-android.txt\"\n configuration. The bundled consumer proguard file covers the proguard configuration for the SDK but you might have to do configurations for your application.\n\n\nIn your apps \nbuild.gradle\n file:\n\n\n1\n2\n3\n4\n5\n    \nrelease\n \n{\n\n      \nminifyEnabled\n \ntrue\n\n      \nshrinkResources\n \ntrue\n\n      \nproguardFiles\n \ngetDefaultProguardFile\n(\nproguard-android.txt\n),\n \nproguard.cfg\n\n    \n}\n\n\n\n\n\n\n\nIn case you use \nlogback-android-core\n, add this to your \nproguard.cfg\n file:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n    #Add your Proguard configuration here\n    # logging\n    -keep class ch.qos.** { *; }\n    -keep class org.slf4j.** { *; }\n    -keepattributes *Annotation*\n    -dontwarn javax.mail.**\n    -dontwarn javax.naming.Context\n    -dontwarn javax.naming.InitialContext", 
            "title": "ProGuard"
        }, 
        {
            "location": "/getting-started/permissions/index.html", 
            "text": "The SDK contains a AndroidManifest.xml file with the permissions required. The permissions are as follows:\n\n\nRequired to communicate with the Seos TSM:\n\n\n\n\nandroid.permission.INTERNET\n\n\nandroid.permission.ACCESS_NETWORK_STATE\n\n\n\n\nRequired to communicate with readers through Bluetooth:\n\n\n\n\nandroid.permission.BLUETOOTH\n\n\nandroid.permission.BLUETOOTH_ADMIN\n\n\nandroid.permission.ACCESS_COARSE_LOCATION\n\n\n\n\nNote: as of version 6.0 of Android the access coarse location permission is required to be able to read the hardware identifier of a reader while running in the background.\nThe Seos Mobile SDK need this to differentiate between readers. More information here: \nAccess to Hardware Identifier\n\n\nRequired to communicate with readers through NFC:\n\n\n\n\nandroid.permission.NFC\n\n\n\n\nRemoving permissions\n\n\nIt is possible to prevent the manifest merging process to include a android library's permissions. For instance if you know your application\nwill only make use of the bluetooth portion of the SDK and not the NFC, it makes sense to remove the NFC permission. To do this you declare the\npermission in your own manifest like so:\n\n\n1\nuses-permission\n \nandroid:name=\nandroid.permission.NFC\n \ntools:node=\nremove\n/", 
            "title": "Removing permissions"
        }, 
        {
            "location": "/getting-started/permissions/index.html#removing-permissions", 
            "text": "It is possible to prevent the manifest merging process to include a android library's permissions. For instance if you know your application\nwill only make use of the bluetooth portion of the SDK and not the NFC, it makes sense to remove the NFC permission. To do this you declare the\npermission in your own manifest like so:  1 uses-permission   android:name= android.permission.NFC   tools:node= remove /", 
            "title": "Removing permissions"
        }, 
        {
            "location": "/getting-started/custom-tsm/index.html", 
            "text": "Custom TSM environment\n\n\nIt is possible to use environments not hosted by ASSA ABLOY mobile services:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nimport\n  \ncom.assaabloy.mobilekeys.api.ApiConfiguration\n;\n\n\nimport\n  \ncom.assaabloy.mobilekeys.api.tsm.Environment\n;\n\n\n\nEnvironment\n \ncustomEnv\n \n=\n \nnew\n \nEnvironment\n(\ntsmUrl\n,\n \nMy Custom TSM\n,\n \npublicKey\n);\n\n\n\n// pass ApiConfiguration to MobileKeysApi::initialize\n\n\nApiConfiguration\n \napiConf\n \n=\n \nnew\n \nApiConfiguration\n.\nBuilder\n()\n\n    \n.\nsetApplicationId\n(\napplicationId\n)\n\n    \n.\nsetApplicationDescription\n(\ndescription\n)\n\n    \n.\nsetEnvironment\n(\ncustomEnv\n)\n\n    \n.\nbuild\n();\n\n\n\n\n\n\n\nHere is how you can extract a \npublickey\n sha256 fingerprint from a PEM certificate using openssl:\n\n\n1\n2\n3\n4\nopenssl x509 -in certificate.pem -pubkey -noout \\\n| openssl pkey -pubin -outform der \\\n| openssl dgst -sha256 -binary \\\n| openssl enc -base64\n\n\n\n\n\n\nTo use a custom AKE key for personalization:  \n\n\n1\n2\n3\n4\n5\n6\n7\n8\nEndpointSetupConfiguration\n \nconfiguration\n \n=\n \nnew\n \nEndpointSetupConfiguration\n.\nBuilder\n()\n\n    \n.\nsetApplicationProperties\n(\napplicationProperties\n)\n\n    \n.\nsetSetupAkeKey\n(\nnew\n \nSetupAkeKeyUnprotected\n(\nbytes\n))\n\n    \n.\nbuild\n();\n\n\n\nmobileKeys\n.\nendpointSetup\n(\ncallback\n,\n\n        \nactivationCode\n,\n\n        \nconfiguration\n);", 
            "title": "Custom TSM"
        }, 
        {
            "location": "/getting-started/custom-tsm/index.html#custom-tsm-environment", 
            "text": "It is possible to use environments not hosted by ASSA ABLOY mobile services:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 import    com.assaabloy.mobilekeys.api.ApiConfiguration ;  import    com.assaabloy.mobilekeys.api.tsm.Environment ;  Environment   customEnv   =   new   Environment ( tsmUrl ,   My Custom TSM ,   publicKey );  // pass ApiConfiguration to MobileKeysApi::initialize  ApiConfiguration   apiConf   =   new   ApiConfiguration . Builder () \n     . setApplicationId ( applicationId ) \n     . setApplicationDescription ( description ) \n     . setEnvironment ( customEnv ) \n     . build ();    Here is how you can extract a  publickey  sha256 fingerprint from a PEM certificate using openssl:  1\n2\n3\n4 openssl x509 -in certificate.pem -pubkey -noout \\\n| openssl pkey -pubin -outform der \\\n| openssl dgst -sha256 -binary \\\n| openssl enc -base64   To use a custom AKE key for personalization:    1\n2\n3\n4\n5\n6\n7\n8 EndpointSetupConfiguration   configuration   =   new   EndpointSetupConfiguration . Builder () \n     . setApplicationProperties ( applicationProperties ) \n     . setSetupAkeKey ( new   SetupAkeKeyUnprotected ( bytes )) \n     . build ();  mobileKeys . endpointSetup ( callback , \n         activationCode , \n         configuration );", 
            "title": "Custom TSM environment"
        }, 
        {
            "location": "/api-changes/migrating-3-4/index.html", 
            "text": "Migrating from 3.x\n\n\nThe main difference between 3.x and 4.x is improved error handling.\n\n\n\n\nThe number of error codes given from the API has been reduced and a few new ones have been added. See the\njavadoc for more information on the meaning of, and how to handle, the different error codes.\n\n\nBLE \nOpeningStatus\n codes has been updated to clarify and simplify.\n\n\n\n\nApart from the changes new features have been introduced, e.g. support for the Bluetooth LE reader seamless mode\nand optimizations for Android 5.0.", 
            "title": "3.x to 4.0"
        }, 
        {
            "location": "/api-changes/migrating-3-4/index.html#migrating-from-3x", 
            "text": "The main difference between 3.x and 4.x is improved error handling.   The number of error codes given from the API has been reduced and a few new ones have been added. See the\njavadoc for more information on the meaning of, and how to handle, the different error codes.  BLE  OpeningStatus  codes has been updated to clarify and simplify.   Apart from the changes new features have been introduced, e.g. support for the Bluetooth LE reader seamless mode\nand optimizations for Android 5.0.", 
            "title": "Migrating from 3.x"
        }, 
        {
            "location": "/api-changes/migrating-4-5/index.html", 
            "text": "Migrating from 4.x\n\n\nThere are a few minor changes that will break backward compatability in the BLE integration between 4.x and 5.x.\n5.x contains improved possibilities for integrations to extend and customize how the decission is made when to connect\nto a BLE reader. Where the 4.x API used a list of enum values, to configure what opening modes should be supported,\nthe 5.0 implementation uses a list of classes each implementing a specific opening mode. The SDK provides three\nopening mode implementations out of the box as descibed in the \nBluetooth reader integration\n chapter:\n\n\n\n\nTapOpeningTrigger\n\n\nSeamlessOpeningTrigger\n\n\nTwistAndGoOpeningTrigger\n\n\n\n\nThe utility method \nScanConfiguration.providedOpeningMethods(BleScanService bleScanService)\n will create a list\ncontaining implementations of all opening modes supported by the SDK. Unless you implement your own opening trigger\nor want to use only a subset of the provided opening modes provided by the SDK, this method should be the preferred\nway of initializing the list of supported opening modes.", 
            "title": "4.x to 5.0"
        }, 
        {
            "location": "/api-changes/migrating-4-5/index.html#migrating-from-4x", 
            "text": "There are a few minor changes that will break backward compatability in the BLE integration between 4.x and 5.x.\n5.x contains improved possibilities for integrations to extend and customize how the decission is made when to connect\nto a BLE reader. Where the 4.x API used a list of enum values, to configure what opening modes should be supported,\nthe 5.0 implementation uses a list of classes each implementing a specific opening mode. The SDK provides three\nopening mode implementations out of the box as descibed in the  Bluetooth reader integration  chapter:   TapOpeningTrigger  SeamlessOpeningTrigger  TwistAndGoOpeningTrigger   The utility method  ScanConfiguration.providedOpeningMethods(BleScanService bleScanService)  will create a list\ncontaining implementations of all opening modes supported by the SDK. Unless you implement your own opening trigger\nor want to use only a subset of the provided opening modes provided by the SDK, this method should be the preferred\nway of initializing the list of supported opening modes.", 
            "title": "Migrating from 4.x"
        }, 
        {
            "location": "/api-changes/migrating-5-6/index.html", 
            "text": "Introduction\n\n\nThis migration guide aims to ease the process of migrating from the ASSA ABLOY Mobile Keys SDK version 5.x to version 6.0. Much has been done to improve the ASSA ABLOY Mobile Keys SDK integration experience for new integrators. For an integrator already using the SDK this will likely mean removing code and making some minor adoptions.\n\n\nDefinitions and abbreviations\n\n\n\n\n\n\n\n\nExpression\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nThe integrating application\n\n\nThe Android Application using the ASSA ABLOY Mobile Services Android SDK.\n\n\n\n\n\n\n//\u2026\n\n\nThe double slash three dots in code samples indicates that code has been intentionally left out for clarity.\n\n\n\n\n\n\n\n\nRenamed classes\n\n\n\n\n\n\n\n\nVersion 5.x\n\n\nVersion 6.0\n\n\n\n\n\n\n\n\n\n\ncom.assaabloy.mobilekeys.api.SoftAndroidMobileKeysFactory\n\n\ncom.assaabloy.mobilekeys.api.MobileKeysApi\n\n\n\n\n\n\ncom.assaabloy.mobilekeys.api.ble.BleOpeningTrigger\n\n\ncom.assaabloy.mobilekeys.api.ble.OpeningTrigger\n\n\n\n\n\n\ncom.assaabloy.mobilekeys.api.ble.OpeningResult\n \n(OpeningResult now represents the entire opening, see JavaDoc)\n\n\ncom.assaabloy.mobilekeys.api.ble.OpeningTriggerAction\n\n\n\n\n\n\ncom.assaabloy.mobilekeys.api.ApiConfiguration.ApiConfigurationBuilder\n\n\ncom.assaabloy.mobilekeys.api.ApiConfiguration.Builder\n\n\n\n\n\n\ncom.assaabloy.mobilekeys.api.MobileKeysErrorCode\n\n\ncom.assaabloy.mobilekeys.api.MobileKeysApiErrorCode\n\n\n\n\n\n\n\n\nRenamed fields and types\n\n\n\n\n\n\n\n\nVersion 5.x\n\n\nVersion 6.0\n\n\n\n\n\n\n\n\n\n\ncom.assaabloy.mobilekeys.api.ble.OpeningStatus#MOBILE_KEY_NOT_FOUND\n\n\ncom.assaabloy.mobilekeys.api.ble.OpeningStatus#REJECTED\n\n\n\n\n\n\n\n\nGeneral changes\n\n\nBuild system\n\n\nThe SDK is no longer packaged as two separate JAR files but is now packaged as a single Android Archive (AAR). The SDK still has two flavors, one for Release and one Debug.\nIn your build.gradle file: \n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nrepositories\n \n{\n\n   \n//\u2026\n\n      \nflatDir\n \n{\n\n        \ndirs\n \nlibs\n\n      \n}\n\n\n}\n\n\n\ndependencies\n \n{\n\n  \n//\u2026\n\n  \n//aar file from libs dir. Name and version is from the filename.\n\n  \ndebugCompile\n \n(\ngroup:\ncom.assaabloy.mobilekeys.api\n,\n \nname:\n \nmobilekeys-android-sdk-debug\n,\n \nversion:\n \n6.0\n,\n \next:\n \naar\n)\n\n  \nreleaseCompile\n \n(\ngroup:\ncom.assaabloy.mobilekeys.api\n,\n \nname:\n \nmobilekeys-android-sdk-release\n,\n \nversion:\n \n6.0\n,\n \next:\naar\n)\n\n\n  \n// Mobile Keys SDK transitive dependencies\n\n  \ncompile\n \ncom.google.code.gson:gson:2.4\n\n  \ncompile\n \norg.slf4j:slf4j-api:1.7.21\n\n  \ncompile\n \ncom.mixpanel.android:mixpanel-android:4.8.6@aar\n\n\n  \n//Enable logging from Mobile Keys SDK\n\n  \ndebugCompile\n \n(\ngroup:\ncom.assaabloy.mobilekeys.api\n,\n \nname:\n \nandroid-slf4j\n,\n \nversion:\n \n6.0\n)\n\n\n}\n\n\n\n\n\n\n\nThe AAR package embeds an \nAndroidManifest.xml\n file which contains some basic configuration such as the permissions and the Service declarations. This will automatically be merged into the integrating application's \nAndroidManifest.xml\n when building.\n6.2 MobileKeys\nThe main entry point for the SDK was previously \nSoftAndroidMobileKeysFactory\n. This class has now been renamed to MobileKeysApi. During the initialization process of the \nMobileKeysApi\n, aside from an Android Context and a \nApiConfiguration\n, the initialize method now also takes a \nScanConfiguration\n.\nThe \nApiConfiguration\n no longer have a \nsetUseHce\n method. This configuration has been moved into another class. More on that in the HCE Section\n\u2003\nThe interface towards mobile keys have changed slightly. The operations towards the interface should now throw significantly less \nMobileKeysException\ns with \nSDK_BUSY\n errors when using the synchronous methods \nlistMobileKeys\n and \ngetEndpointInfo\n. \nThe wrapping layers of Seos have been removed, i.e. \nSeosSession\n and \nMobileKeysSession\n, instead the implementing application can obtain and use a Seos Access API session directly. With this change we also removed the password API. For more advanced use cases we now refer to the Seos and Seos Access API documentation.\nIt is now possible to subscribe to changes in the MobileKeys interface using the \naddListener(MobileKeysListener)\n method.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n    \n//...\n\n    \nMobileKeys\n \nmobileKeys\n \n=\n \nMobileKeysApi\n.\ngetInstance\n().\ngetMobileKeys\n();\n\n    \nmobileKeys\n.\naddListener\n(\nthis\n);\n\n\n}\n\n\n\n@Override\n\n\npublic\n \nvoid\n \nonMobileKeysChanged\n(\nint\n \nchange\n)\n\n\n{\n\n    \nif\n \n(\nMobileKeysListener\n.\nENDPOINT_INFO\n \n==\n \n(\nchange\n \n \nMobileKeysListener\n.\nENDPOINT_INFO\n))\n\n    \n{\n\n        \n//The EndpointInfo has changed\n\n        \n//...\n\n    \n}\n\n\n    \nif\n \n(\nMobileKeysListener\n.\nKEYS_CHANGED\n \n==\n \n(\nchange\n \n \nMobileKeysListener\n.\nKEYS_CHANGED\n))\n\n    \n{\n\n        \n//The list of Mobile Keys has changed\n\n        \n//...\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\nDevice Eligibility\n\n\nThe eligibility checking feature has been moved into the \nMobileKeysApi\n class for visibility.\n\n\nError codes\n\n\nThe number of error codes included in the \nMobileKeysException\n's has been greatly reduced and now has more clear meaning. Please refer to the Javadoc for \nMobileKeysApiError\n code for the description of each error code and the respective recommended action.\n\n\nBLe\n\n\nA big improvement in the new SDK is that the BLe service is bundled in to the SDK. The integrating application should no longer extend the BleScanService class. Don't worry though, the integrating application still have the control over starting and stopping the service and if the SDK should interact with readers or not. Please remove your current BLe service and start using the bundled version instead.\n\n\nControlling BLe scanning\n\n\nThe functionality of the \nBleScanService\n is maintained but all of the Android specific code is now inside the SDK and exposed as a separate and condensed interface: \nReaderConnectionController\n. Get an instance of the \nReaderConnectionController\n from the \nMobileKeysApi\n class.\n\n\n1\n2\n    \nReaderConnectionController\n \nreaderConnectionController\n \n=\n \nMobileKeysApi\n.\ngetInstance\n().\ngetReaderConnectionController\n();\n\n    \nreaderConnectionController\n.\nstartScanning\n();\n\n\n\n\n\n\n\nWith the \nReaderConnectionController\n you can start and stop scanning for BLe readers which in turn enables and disables the BLe service. Additionally, you can start scanning with the service as a foreground service with the \nstartForegroundScanning(Notification)\n method.\n\n\nThe method \ngetScanConfiguration\n gives you an instance of the current \nScanConfiguration\n. Changing the properties of the \nScanConfiguration\n using the setter methods will be applied directly to the scanning, some of which will automatically restart the current scanning. Please refer to the Javadoc of the \nScanConfiguration\n regarding this. The \nScanConfiguration\n class now has a builder method for convenience.\n\n\n1\n2\n3\n    \nReaderConnectionController\n \nreaderConnectionController\n \n=\n \nMobileKeysApi\n.\ngetInstance\n().\ngetReaderConnectionController\n();\n\n    \nreaderConnectionController\n.\ngetScanConfiguration\n().\nsetRssiSensitivity\n(\nRssiSensitivity\n.\nLOW\n);\n\n    \n//the SDK is now scanning with RSSI sensitivity LOW \n\n\n\n\n\n\n\nCallbacks\n\n\nCallbacks from the SDK about reader sessions over BLe is now moved into the \nReaderConnectionCallback\n. The \nReaderConnectionCallback\n class can only have one listener, but there is no restriction on how many \nReaderConnectionCallback\n instances that can be created. \n\n\nThe callback interface has changed so that a closed connection now reports back an opening result object containing the opening status and additional payload. The payload is an optional application specific message that was returned from the lock.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n     \n//...\n\n       \nReaderConnectionCallback\n \nreaderConnectionCallback\n \n=\n \nnew\n \nReaderConnectionCallback\n(\ngetApplicationContext\n());\n\n       \nreaderConnectionCallback\n.\nregisterReceiver\n(\nthis\n);\n\n    \n}\n\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonReaderConnectionOpened\n(\nReader\n \nreader\n,\n \nOpeningType\n \nopeningType\n)\n\n    \n{\n\n       \nToast\n.\nmakeText\n(\nthis\n,\n \nonReaderConnectionOpened\n,\n \nToast\n.\nLENGTH_SHORT\n).\nshow\n();\n\n    \n}\n\n    \n@Override\n \n    \npublic\n \nvoid\n \nonReaderConnectionClosed\n(\nReader\n \nreader\n,\n \nOpeningResult\n \nopeningResult\n)\n\n    \n{\n\n       \nToast\n.\nmakeText\n(\nthis\n,\n \nonReaderConnectionClosed\n,\n \nToast\n.\nLENGTH_SHORT\n).\nshow\n();\n\n    \n}\n\n    \n//The rest of the ReaderConnectionListener interface\n\n\n\n\n\n\n\nOpeningTriggers\n\n\nThe behavior of the OpeningTrigger classes has changed slightly. They now have lifecycle methods that better reflect the current state of the BLe scanning. The abstract class ManualOpeningTrigger now also have the helper method getClosestReaderByOpeningType(OpeningType). Each trigger implementation now has the ability to interact with the BleScanner interface through the getBleScanner method to open readers, list readers as well as send callbacks to the registered ReaderConnectionListeners. Be careful though, this object will be null when the service is not running, use the isCreated method to check this. There is also a similar method to check if the SDK is scanning for readers, isStarted.\nThe lifecycle methods are\n\n\n1\n2\n3\n4\n5\nonCreate - The service was created. It is safe to call getBleScanner.\nonDestroy - The service was destroyed. It is no longer safe to call getBleScanner as it will return null.\n\nonStart - When the scanning is started.\nonStop - When the scanning is stopped.\n\n\n\n\n\n\nThe scanning will be started immediately when the service starts and if the Bluetooth is turned on. Additionally, the scanning will be started and stopped during reader sessions and when some properties of the ScanConfiguration changes. \u2003\n\n\nHCE\n\n\nThe HCE service is now bundled in to the SDK and the integrating application should not extend the HceService.\n\n\nConfigure the HCE service\n\n\nThe service is disabled by default but can be enabled and disabled using the ReaderConnectionController. This replaces the ApiConfiguration.setUseHce functionality.\n\n\nIn order to use the HCE service the integrating application need to specify an AID to be used when communicating with readers through HCE. This is achieved by the resource merging mechanism of the android build process. If you browse the Mobile Keys SDK AAR package by looking in the \n/build/intermediates/exploded-aar/com.assaabloy.mobilekeys.api/\n folder in Android Studio, you will notice a file called \nseos_hce_service.xml\n in the \n/res/xml/\n directory. Override this file by creating an equal one in the integrating applications \n/res/xml/\n directory (you can copy the file from the SDK). Replace the value in the name attribute of the \naid-filter\n tag with an AID provided by your onboarding team.\n\n\nCallbacks\n\n\nCallbacks from the SDK about reader sessions over HCE is now moved into the \nHceConnectionCallback\n. The method signatures for the new \nHceConnectionListener\n are the same as the ones in the now replaced \nHceService class\n. The \nHceConnectionCallback\n class can only have one listener, but there is no restriction on how many \nHceConnectionCallback\n instances that are created.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n//...\n\n   \nHceConnectionCallback\n \nhceConnectionCallback\n \n=\n \nnew\n \nHceConnectionCallback\n(\ngetApplicationContext\n());\n\n   \nhceConnectionCallback\n.\nregisterReceiver\n(\nthis\n);\n\n\n}\n\n\n@Override\n\n\npublic\n \nvoid\n \nonHceSessionOpened\n()\n\n\n{\n\n    \nToast\n.\nmakeText\n(\nthis\n,\n \nonSessionOpened\n,\n \nToast\n.\nLENGTH_SHORT\n).\nshow\n();\n\n\n}\n\n\n\n//The rest of the HceConnectionListener interface \n\n\n\n\n\n\n\nPut and get data\n\n\nThe Put and get data API have been removed from Mobile Keys SDK but the functionality remains. The API responsible for this now resides in Seos Access API.\n\n\nAccessing the Seos Access API\n\n\nIn order to perform the put and get data you need to open a Seos session. Opening a session is made through the Mobile Keys SDK. Note that you might have to have a different set of session parameters in order to establish your session.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n//...\n\n\nSession\n \nsession\n \n=\n \nnull\n;\n\n\ntry\n \n\n{\n\n    \nSessionParameters\n \nopenParameters\n \n=\n \nnew\n \nSessionParameters\n.\nBuilder\n()\n\n                       \n.\nsetSelection\n(\nSelect\n.\nextendedSelectAdf\n(\noidFromIdentifier\n(\nidentifier\n))\n\n                       \n.\nsetPrivacyKeyset\n(\nnew\n \nGenesisPrivacyKeyset\n())\n\n                       \n.\nbuild\n();\n\n    \nsession\n \n=\n \nmobileKeys\n.\nopenSeosAccessApiSession\n(\nopenParameters\n);\n\n    \n// Use session to put and/or get data\n\n\n}\n\n\nfinally\n  \n// make sure to close the session when you are done\n\n\n{\n\n    \nif\n(\nsession\n \n!=\n \nnull\n)\n \n    \n{\n\n        \nsession\n.\nclose\n();\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\nPut data command\n\n\nTo put data you need to obtain a Seos session, you may for instance use the one described previously. Then create and run a put command. Note that you might have different requirements that prevents you from using the session described in Accessing the Seos Access API. The generic data object put command is described below.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n    \n//...\n\n    \nCommand\nVoid\n \nputCommand\n \n=\n \nCommands\n.\nputSeosObject\n(\nnew\n \nDataObject\n(\nnew\n \nSeosTag\n(\n/*TAG ID*/\n),\n \ndata\n));\n\n    \nCommandResult\nVoid\n \nresult\n \n=\n \nsession\n.\nexecute\n(\nputCommand\n);\n\n    \nif\n \n(\nresult\n.\nstatus\n()\n \n==\n \nCommandResult\n.\nStatus\n.\nSUCCESS\n)\n \n    \n{\n\n     \n// Success\n\n    \n}\n\n    \nelse\n \n    \n{\n\n     \n// Failure\n\n    \n}\n\n\n\n\n\n\n\nGet data command\n\n\nTo get data you need to obtain a Seos session, you may for instance use the one described previously. Then create and run a get data command. Note that you might have different requirements that prevents you from using the session described in Accessing the Seos Access API. The generic data object get command is described below.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n    \n//...\n\n    \nCommand\nDataObject\n \nreadDataCommand\n \n=\n \n            \ngetSeosObject\n(\ndataObject\n(\n/*depending on what object you want*/\n));\n\n    \nCommandResult\nDataObject\n \nresult\n \n=\n \nsession\n.\nexecute\n(\nreadDataCommand\n);\n\n    \nif\n \n(\nresult\n.\nstatus\n()\n \n==\n \nCommandResult\n.\nStatus\n.\nSUCCESS\n)\n \n    \n{\n\n        \n// Success\n\n        \nDataObject\n \ndataObject\n \n=\n \nresult\n.\nresponseData\n();\n\n    \n}\n\n    \nelse\n \n    \n{\n\n        \n// Failure\n\n    \n}\n\n\n\n\n\n\n\nGet authentication info\n\n\nAuthentication info contains the oid last used to authenticate and the authentication counter. In order to get the information, you need to obtain a Seos session and then create and run the specific 'last authentication info' command. \n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n//...\n\n\nCommand\nAuthenticationInfo\n \ngetDataCommand\n \n=\n           \n        \nCommands\n.\ngetSeosObject\n(\nSeosObjects\n.\nLAST_AUTHENTICATION_INFO\n);\n\n\nCommandResult\nAuthenticationInfo\n \nresult\n \n=\n \nsession\n.\nexecute\n(\ngetDataCommand\n);\n\n\nif\n \n(\nresult\n.\nstatus\n()\n \n==\n \nCommandResult\n.\nStatus\n.\nSUCCESS\n)\n \n\n{\n\n    \n// Success\n\n    \nOid\n \noid\n \n=\n \ngetDataResult\n.\nresponseData\n().\nlastAuthenticatedOid\n();\n\n    \nint\n \ncounter\n \n=\n \ngetDataResults\n.\nresponseData\n().\nauthenticationCounter\n()\n\n\n}\n\n\nelse\n \n\n{\n\n    \n// Failure\n\n\n}", 
            "title": "5.x to 6.0"
        }, 
        {
            "location": "/api-changes/migrating-5-6/index.html#introduction", 
            "text": "This migration guide aims to ease the process of migrating from the ASSA ABLOY Mobile Keys SDK version 5.x to version 6.0. Much has been done to improve the ASSA ABLOY Mobile Keys SDK integration experience for new integrators. For an integrator already using the SDK this will likely mean removing code and making some minor adoptions.", 
            "title": "Introduction"
        }, 
        {
            "location": "/api-changes/migrating-5-6/index.html#definitions-and-abbreviations", 
            "text": "Expression  Description      The integrating application  The Android Application using the ASSA ABLOY Mobile Services Android SDK.    //\u2026  The double slash three dots in code samples indicates that code has been intentionally left out for clarity.", 
            "title": "Definitions and abbreviations"
        }, 
        {
            "location": "/api-changes/migrating-5-6/index.html#renamed-classes", 
            "text": "Version 5.x  Version 6.0      com.assaabloy.mobilekeys.api.SoftAndroidMobileKeysFactory  com.assaabloy.mobilekeys.api.MobileKeysApi    com.assaabloy.mobilekeys.api.ble.BleOpeningTrigger  com.assaabloy.mobilekeys.api.ble.OpeningTrigger    com.assaabloy.mobilekeys.api.ble.OpeningResult   (OpeningResult now represents the entire opening, see JavaDoc)  com.assaabloy.mobilekeys.api.ble.OpeningTriggerAction    com.assaabloy.mobilekeys.api.ApiConfiguration.ApiConfigurationBuilder  com.assaabloy.mobilekeys.api.ApiConfiguration.Builder    com.assaabloy.mobilekeys.api.MobileKeysErrorCode  com.assaabloy.mobilekeys.api.MobileKeysApiErrorCode", 
            "title": "Renamed classes"
        }, 
        {
            "location": "/api-changes/migrating-5-6/index.html#renamed-fields-and-types", 
            "text": "Version 5.x  Version 6.0      com.assaabloy.mobilekeys.api.ble.OpeningStatus#MOBILE_KEY_NOT_FOUND  com.assaabloy.mobilekeys.api.ble.OpeningStatus#REJECTED", 
            "title": "Renamed fields and types"
        }, 
        {
            "location": "/api-changes/migrating-5-6/index.html#general-changes", 
            "text": "", 
            "title": "General changes"
        }, 
        {
            "location": "/api-changes/migrating-5-6/index.html#build-system", 
            "text": "The SDK is no longer packaged as two separate JAR files but is now packaged as a single Android Archive (AAR). The SDK still has two flavors, one for Release and one Debug.\nIn your build.gradle file:    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 repositories   { \n    //\u2026 \n       flatDir   { \n         dirs   libs \n       }  }  dependencies   { \n   //\u2026 \n   //aar file from libs dir. Name and version is from the filename. \n   debugCompile   ( group: com.assaabloy.mobilekeys.api ,   name:   mobilekeys-android-sdk-debug ,   version:   6.0 ,   ext:   aar ) \n   releaseCompile   ( group: com.assaabloy.mobilekeys.api ,   name:   mobilekeys-android-sdk-release ,   version:   6.0 ,   ext: aar ) \n\n   // Mobile Keys SDK transitive dependencies \n   compile   com.google.code.gson:gson:2.4 \n   compile   org.slf4j:slf4j-api:1.7.21 \n   compile   com.mixpanel.android:mixpanel-android:4.8.6@aar \n\n   //Enable logging from Mobile Keys SDK \n   debugCompile   ( group: com.assaabloy.mobilekeys.api ,   name:   android-slf4j ,   version:   6.0 )  }    The AAR package embeds an  AndroidManifest.xml  file which contains some basic configuration such as the permissions and the Service declarations. This will automatically be merged into the integrating application's  AndroidManifest.xml  when building.\n6.2 MobileKeys\nThe main entry point for the SDK was previously  SoftAndroidMobileKeysFactory . This class has now been renamed to MobileKeysApi. During the initialization process of the  MobileKeysApi , aside from an Android Context and a  ApiConfiguration , the initialize method now also takes a  ScanConfiguration .\nThe  ApiConfiguration  no longer have a  setUseHce  method. This configuration has been moved into another class. More on that in the HCE Section\n\u2003\nThe interface towards mobile keys have changed slightly. The operations towards the interface should now throw significantly less  MobileKeysException s with  SDK_BUSY  errors when using the synchronous methods  listMobileKeys  and  getEndpointInfo . \nThe wrapping layers of Seos have been removed, i.e.  SeosSession  and  MobileKeysSession , instead the implementing application can obtain and use a Seos Access API session directly. With this change we also removed the password API. For more advanced use cases we now refer to the Seos and Seos Access API documentation.\nIt is now possible to subscribe to changes in the MobileKeys interface using the  addListener(MobileKeysListener)  method.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20      //... \n     MobileKeys   mobileKeys   =   MobileKeysApi . getInstance (). getMobileKeys (); \n     mobileKeys . addListener ( this );  }  @Override  public   void   onMobileKeysChanged ( int   change )  { \n     if   ( MobileKeysListener . ENDPOINT_INFO   ==   ( change     MobileKeysListener . ENDPOINT_INFO )) \n     { \n         //The EndpointInfo has changed \n         //... \n     } \n\n     if   ( MobileKeysListener . KEYS_CHANGED   ==   ( change     MobileKeysListener . KEYS_CHANGED )) \n     { \n         //The list of Mobile Keys has changed \n         //... \n     }  }", 
            "title": "Build system"
        }, 
        {
            "location": "/api-changes/migrating-5-6/index.html#device-eligibility", 
            "text": "The eligibility checking feature has been moved into the  MobileKeysApi  class for visibility.", 
            "title": "Device Eligibility"
        }, 
        {
            "location": "/api-changes/migrating-5-6/index.html#error-codes", 
            "text": "The number of error codes included in the  MobileKeysException 's has been greatly reduced and now has more clear meaning. Please refer to the Javadoc for  MobileKeysApiError  code for the description of each error code and the respective recommended action.", 
            "title": "Error codes"
        }, 
        {
            "location": "/api-changes/migrating-5-6/index.html#ble", 
            "text": "A big improvement in the new SDK is that the BLe service is bundled in to the SDK. The integrating application should no longer extend the BleScanService class. Don't worry though, the integrating application still have the control over starting and stopping the service and if the SDK should interact with readers or not. Please remove your current BLe service and start using the bundled version instead.", 
            "title": "BLe"
        }, 
        {
            "location": "/api-changes/migrating-5-6/index.html#controlling-ble-scanning", 
            "text": "The functionality of the  BleScanService  is maintained but all of the Android specific code is now inside the SDK and exposed as a separate and condensed interface:  ReaderConnectionController . Get an instance of the  ReaderConnectionController  from the  MobileKeysApi  class.  1\n2      ReaderConnectionController   readerConnectionController   =   MobileKeysApi . getInstance (). getReaderConnectionController (); \n     readerConnectionController . startScanning ();    With the  ReaderConnectionController  you can start and stop scanning for BLe readers which in turn enables and disables the BLe service. Additionally, you can start scanning with the service as a foreground service with the  startForegroundScanning(Notification)  method.  The method  getScanConfiguration  gives you an instance of the current  ScanConfiguration . Changing the properties of the  ScanConfiguration  using the setter methods will be applied directly to the scanning, some of which will automatically restart the current scanning. Please refer to the Javadoc of the  ScanConfiguration  regarding this. The  ScanConfiguration  class now has a builder method for convenience.  1\n2\n3      ReaderConnectionController   readerConnectionController   =   MobileKeysApi . getInstance (). getReaderConnectionController (); \n     readerConnectionController . getScanConfiguration (). setRssiSensitivity ( RssiSensitivity . LOW ); \n     //the SDK is now scanning with RSSI sensitivity LOW", 
            "title": "Controlling BLe scanning"
        }, 
        {
            "location": "/api-changes/migrating-5-6/index.html#callbacks", 
            "text": "Callbacks from the SDK about reader sessions over BLe is now moved into the  ReaderConnectionCallback . The  ReaderConnectionCallback  class can only have one listener, but there is no restriction on how many  ReaderConnectionCallback  instances that can be created.   The callback interface has changed so that a closed connection now reports back an opening result object containing the opening status and additional payload. The payload is an optional application specific message that was returned from the lock.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16       //... \n        ReaderConnectionCallback   readerConnectionCallback   =   new   ReaderConnectionCallback ( getApplicationContext ()); \n        readerConnectionCallback . registerReceiver ( this ); \n     } \n\n     @Override \n     public   void   onReaderConnectionOpened ( Reader   reader ,   OpeningType   openingType ) \n     { \n        Toast . makeText ( this ,   onReaderConnectionOpened ,   Toast . LENGTH_SHORT ). show (); \n     } \n     @Override  \n     public   void   onReaderConnectionClosed ( Reader   reader ,   OpeningResult   openingResult ) \n     { \n        Toast . makeText ( this ,   onReaderConnectionClosed ,   Toast . LENGTH_SHORT ). show (); \n     } \n     //The rest of the ReaderConnectionListener interface", 
            "title": "Callbacks"
        }, 
        {
            "location": "/api-changes/migrating-5-6/index.html#openingtriggers", 
            "text": "The behavior of the OpeningTrigger classes has changed slightly. They now have lifecycle methods that better reflect the current state of the BLe scanning. The abstract class ManualOpeningTrigger now also have the helper method getClosestReaderByOpeningType(OpeningType). Each trigger implementation now has the ability to interact with the BleScanner interface through the getBleScanner method to open readers, list readers as well as send callbacks to the registered ReaderConnectionListeners. Be careful though, this object will be null when the service is not running, use the isCreated method to check this. There is also a similar method to check if the SDK is scanning for readers, isStarted.\nThe lifecycle methods are  1\n2\n3\n4\n5 onCreate - The service was created. It is safe to call getBleScanner.\nonDestroy - The service was destroyed. It is no longer safe to call getBleScanner as it will return null.\n\nonStart - When the scanning is started.\nonStop - When the scanning is stopped.   The scanning will be started immediately when the service starts and if the Bluetooth is turned on. Additionally, the scanning will be started and stopped during reader sessions and when some properties of the ScanConfiguration changes.", 
            "title": "OpeningTriggers"
        }, 
        {
            "location": "/api-changes/migrating-5-6/index.html#hce", 
            "text": "The HCE service is now bundled in to the SDK and the integrating application should not extend the HceService.", 
            "title": "HCE"
        }, 
        {
            "location": "/api-changes/migrating-5-6/index.html#configure-the-hce-service", 
            "text": "The service is disabled by default but can be enabled and disabled using the ReaderConnectionController. This replaces the ApiConfiguration.setUseHce functionality.  In order to use the HCE service the integrating application need to specify an AID to be used when communicating with readers through HCE. This is achieved by the resource merging mechanism of the android build process. If you browse the Mobile Keys SDK AAR package by looking in the  /build/intermediates/exploded-aar/com.assaabloy.mobilekeys.api/  folder in Android Studio, you will notice a file called  seos_hce_service.xml  in the  /res/xml/  directory. Override this file by creating an equal one in the integrating applications  /res/xml/  directory (you can copy the file from the SDK). Replace the value in the name attribute of the  aid-filter  tag with an AID provided by your onboarding team.", 
            "title": "Configure the HCE service"
        }, 
        {
            "location": "/api-changes/migrating-5-6/index.html#callbacks_1", 
            "text": "Callbacks from the SDK about reader sessions over HCE is now moved into the  HceConnectionCallback . The method signatures for the new  HceConnectionListener  are the same as the ones in the now replaced  HceService class . The  HceConnectionCallback  class can only have one listener, but there is no restriction on how many  HceConnectionCallback  instances that are created.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 //... \n    HceConnectionCallback   hceConnectionCallback   =   new   HceConnectionCallback ( getApplicationContext ()); \n    hceConnectionCallback . registerReceiver ( this );  }  @Override  public   void   onHceSessionOpened ()  { \n     Toast . makeText ( this ,   onSessionOpened ,   Toast . LENGTH_SHORT ). show ();  }  //The rest of the HceConnectionListener interface", 
            "title": "Callbacks"
        }, 
        {
            "location": "/api-changes/migrating-5-6/index.html#put-and-get-data", 
            "text": "The Put and get data API have been removed from Mobile Keys SDK but the functionality remains. The API responsible for this now resides in Seos Access API.", 
            "title": "Put and get data"
        }, 
        {
            "location": "/api-changes/migrating-5-6/index.html#accessing-the-seos-access-api", 
            "text": "In order to perform the put and get data you need to open a Seos session. Opening a session is made through the Mobile Keys SDK. Note that you might have to have a different set of session parameters in order to establish your session.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 //...  Session   session   =   null ;  try   { \n     SessionParameters   openParameters   =   new   SessionParameters . Builder () \n                        . setSelection ( Select . extendedSelectAdf ( oidFromIdentifier ( identifier )) \n                        . setPrivacyKeyset ( new   GenesisPrivacyKeyset ()) \n                        . build (); \n     session   =   mobileKeys . openSeosAccessApiSession ( openParameters ); \n     // Use session to put and/or get data  }  finally    // make sure to close the session when you are done  { \n     if ( session   !=   null )  \n     { \n         session . close (); \n     }  }", 
            "title": "Accessing the Seos Access API"
        }, 
        {
            "location": "/api-changes/migrating-5-6/index.html#put-data-command", 
            "text": "To put data you need to obtain a Seos session, you may for instance use the one described previously. Then create and run a put command. Note that you might have different requirements that prevents you from using the session described in Accessing the Seos Access API. The generic data object put command is described below.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11      //... \n     Command Void   putCommand   =   Commands . putSeosObject ( new   DataObject ( new   SeosTag ( /*TAG ID*/ ),   data )); \n     CommandResult Void   result   =   session . execute ( putCommand ); \n     if   ( result . status ()   ==   CommandResult . Status . SUCCESS )  \n     { \n      // Success \n     } \n     else  \n     { \n      // Failure \n     }", 
            "title": "Put data command"
        }, 
        {
            "location": "/api-changes/migrating-5-6/index.html#get-data-command", 
            "text": "To get data you need to obtain a Seos session, you may for instance use the one described previously. Then create and run a get data command. Note that you might have different requirements that prevents you from using the session described in Accessing the Seos Access API. The generic data object get command is described below.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13      //... \n     Command DataObject   readDataCommand   =  \n             getSeosObject ( dataObject ( /*depending on what object you want*/ )); \n     CommandResult DataObject   result   =   session . execute ( readDataCommand ); \n     if   ( result . status ()   ==   CommandResult . Status . SUCCESS )  \n     { \n         // Success \n         DataObject   dataObject   =   result . responseData (); \n     } \n     else  \n     { \n         // Failure \n     }", 
            "title": "Get data command"
        }, 
        {
            "location": "/api-changes/migrating-5-6/index.html#get-authentication-info", 
            "text": "Authentication info contains the oid last used to authenticate and the authentication counter. In order to get the information, you need to obtain a Seos session and then create and run the specific 'last authentication info' command.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 //...  Command AuthenticationInfo   getDataCommand   =            \n         Commands . getSeosObject ( SeosObjects . LAST_AUTHENTICATION_INFO );  CommandResult AuthenticationInfo   result   =   session . execute ( getDataCommand );  if   ( result . status ()   ==   CommandResult . Status . SUCCESS )   { \n     // Success \n     Oid   oid   =   getDataResult . responseData (). lastAuthenticatedOid (); \n     int   counter   =   getDataResults . responseData (). authenticationCounter ()  }  else   { \n     // Failure  }", 
            "title": "Get authentication info"
        }, 
        {
            "location": "/api-changes/migrating-6_6-6_7/index.html", 
            "text": "Migrating to 6.7.x\n\n\nIn order to improve security and performance, Google has decided to enforce targetSdkVersion \n= 26 for\nnew apps and updates to existing apps. In short:\n\n\n\n\nIn August 2018, Google will no longer accept \nnew\n applications with targetSdkVersion \n 26.\n\n\nIn September 2018, Google will no longer accept updates to \nexisting\n applications with targetSdkVersion \n 26.\n\n\n\n\nWhat are the implications?\n\n\nIn SDK 26, new restrictions are present regarding how one may use background services. Any app\nrunning in the background will no longer be able to start background services. As the \nSeos Mobile SDK\n provides\nfunctionality for scanning for Bluetooth readers in the background, a few things have changed in the 6.7.0\nrelease of the Seos Mobile SDK for Android\n\n\nWhat needs to be done by the integrators?\n\n\n\n\n\n\nBackground scanning (\nReaderConnectionController#startScanning\n) is now disabled by default so that\n  consumers of the SDK don't unknowingly overlook the necessary changes needed for applications to work\n  properly.\n\n\n\n\n\n\nTo enable background scanning again, one would need to set \nallowBackgroundScanning\n to \ntrue\n in\n    ScanConfiguration (either directly through the constructor or through the builder).\n\n\n\n\nIf background scanning is enabled, adjustments to the application will be necessary: \n\n\nReaderConnectionController#startScanning\n \nmust not\n be called while your application is in the\n   background on devices running Android API level \n= 26. If it is, the application \nwill\n crash. If\n   startScanning is called while your application is in the foreground, it will keep scanning while\n   the application remains in the foreground, but will be stopped by the Android operating system after\n   some time if the application is put in the background.\n\n\nIf scanning while the application is running in the background is desired on devices running Android\n   API level \n= 26 you \nmust\n use \nReaderConnectionController#startForegroundScanning\n\n\n\n\n\n\n\n\nOther changes:\n\n\n\n\nReaderConnectionController#startForegroundScanning\n does not allow the notification argument to be \nnull\n\n  anymore. Either pass a notification, or use \nReaderConnectionController#startScanning\n while taking the\n  precautions described above.", 
            "title": "6.6.x to 6.7.0"
        }, 
        {
            "location": "/api-changes/migrating-6_6-6_7/index.html#migrating-to-67x", 
            "text": "In order to improve security and performance, Google has decided to enforce targetSdkVersion  = 26 for\nnew apps and updates to existing apps. In short:   In August 2018, Google will no longer accept  new  applications with targetSdkVersion   26.  In September 2018, Google will no longer accept updates to  existing  applications with targetSdkVersion   26.", 
            "title": "Migrating to 6.7.x"
        }, 
        {
            "location": "/api-changes/migrating-6_6-6_7/index.html#what-are-the-implications", 
            "text": "In SDK 26, new restrictions are present regarding how one may use background services. Any app\nrunning in the background will no longer be able to start background services. As the  Seos Mobile SDK  provides\nfunctionality for scanning for Bluetooth readers in the background, a few things have changed in the 6.7.0\nrelease of the Seos Mobile SDK for Android", 
            "title": "What are the implications?"
        }, 
        {
            "location": "/api-changes/migrating-6_6-6_7/index.html#what-needs-to-be-done-by-the-integrators", 
            "text": "Background scanning ( ReaderConnectionController#startScanning ) is now disabled by default so that\n  consumers of the SDK don't unknowingly overlook the necessary changes needed for applications to work\n  properly.    To enable background scanning again, one would need to set  allowBackgroundScanning  to  true  in\n    ScanConfiguration (either directly through the constructor or through the builder).   If background scanning is enabled, adjustments to the application will be necessary:   ReaderConnectionController#startScanning   must not  be called while your application is in the\n   background on devices running Android API level  = 26. If it is, the application  will  crash. If\n   startScanning is called while your application is in the foreground, it will keep scanning while\n   the application remains in the foreground, but will be stopped by the Android operating system after\n   some time if the application is put in the background.  If scanning while the application is running in the background is desired on devices running Android\n   API level  = 26 you  must  use  ReaderConnectionController#startForegroundScanning", 
            "title": "What needs to be done by the integrators?"
        }, 
        {
            "location": "/api-changes/migrating-6_6-6_7/index.html#other-changes", 
            "text": "ReaderConnectionController#startForegroundScanning  does not allow the notification argument to be  null \n  anymore. Either pass a notification, or use  ReaderConnectionController#startScanning  while taking the\n  precautions described above.", 
            "title": "Other changes:"
        }, 
        {
            "location": "/api-changes/migrating-6_7-7_0/index.html", 
            "text": "Migrating to 7.0.0\n\n\nWhen upgrading from 6.7.0 or later, only minimal changes are required. If the Mobile Keys SDK haven't been updated \nto 6.7.0, refer to its migration guide.\n\n\nNote that \n@Experimental\n API:s can change between versions without causing a MAJOR version release. This includes\nthe new Bluetooth modes. \n\n\nBREAKING CHANGES:\n\n\nJava bytecode version has been updated to 1.8. This needs to be updated in\nthe integrating applications as well.\n\n\nThree new dependencies are now needed (with the following versions at the time of release):\n- \norg.jetbrains.kotlin:kotlin-stdlib:1.3.11\n \n- \norg.jetbrains.kotlinx:kotlinx-coroutines-core:1.0.1\n\n- \norg.jetbrains.kotlinx:kotlinx-coroutines-android:1.0.1\n\n\nRenamed classes:\n\n\n\n\nHceConnectionInfoType\n -\n \nReaderConnectionInfoType\n\n\nHceConnectionEventType\n -\n \nReaderConnectionEventType\n\n\n\n\nRemoved methods:\n\n\n\n\nReader::lastScan()\n\n\n\n\nUse \nReader::lastScanTimeStamp\n instead. If you need the time stamp in Unix time, use the following:\n    \nSystem.currentTimeMillis() - SystemClock.elapsedRealtime() + reader.lastScanTimeStamp()\n\n\n\n\n\n\nEndpointInfo::getEndpointId\n\n\n\n\n\n\nUse \nEndpointInfo::getSeosId\n instead\n\n\n\n\n\n\nReader::protocolVersion\n\n\n\n\n\n\nUse \nReader::profileVersion\n instead\n\n\n\n\n\n\nReader::normalizedFilteredRssi\n\n\n\n\nUse \nReader::rssi\n instead\n\n\n\n\nExceptions:\n\n\n\n\nopenSeosAccessApiSession\n now doesn't throw \nSessionException", 
            "title": "6.7+ to 7.0"
        }, 
        {
            "location": "/api-changes/migrating-6_7-7_0/index.html#migrating-to-700", 
            "text": "When upgrading from 6.7.0 or later, only minimal changes are required. If the Mobile Keys SDK haven't been updated \nto 6.7.0, refer to its migration guide.  Note that  @Experimental  API:s can change between versions without causing a MAJOR version release. This includes\nthe new Bluetooth modes.", 
            "title": "Migrating to 7.0.0"
        }, 
        {
            "location": "/api-changes/migrating-6_7-7_0/index.html#breaking-changes", 
            "text": "Java bytecode version has been updated to 1.8. This needs to be updated in\nthe integrating applications as well.  Three new dependencies are now needed (with the following versions at the time of release):\n-  org.jetbrains.kotlin:kotlin-stdlib:1.3.11  \n-  org.jetbrains.kotlinx:kotlinx-coroutines-core:1.0.1 \n-  org.jetbrains.kotlinx:kotlinx-coroutines-android:1.0.1", 
            "title": "BREAKING CHANGES:"
        }, 
        {
            "location": "/api-changes/migrating-6_7-7_0/index.html#renamed-classes", 
            "text": "HceConnectionInfoType  -   ReaderConnectionInfoType  HceConnectionEventType  -   ReaderConnectionEventType", 
            "title": "Renamed classes:"
        }, 
        {
            "location": "/api-changes/migrating-6_7-7_0/index.html#removed-methods", 
            "text": "Reader::lastScan()   Use  Reader::lastScanTimeStamp  instead. If you need the time stamp in Unix time, use the following:\n     System.currentTimeMillis() - SystemClock.elapsedRealtime() + reader.lastScanTimeStamp()    EndpointInfo::getEndpointId    Use  EndpointInfo::getSeosId  instead    Reader::protocolVersion    Use  Reader::profileVersion  instead    Reader::normalizedFilteredRssi   Use  Reader::rssi  instead", 
            "title": "Removed methods:"
        }, 
        {
            "location": "/api-changes/migrating-6_7-7_0/index.html#exceptions", 
            "text": "openSeosAccessApiSession  now doesn't throw  SessionException", 
            "title": "Exceptions:"
        }, 
        {
            "location": "/errors/sdk-errors/index.html", 
            "text": "Background\n\n\nThese are the error codes that is returned by the SDK\n\n\nPublic error code\n\n\n\n\n\n\n\n\nCode\n\n\nDescription\n\n\nRecommended action\n\n\n\n\n\n\n\n\n\n\nINTERNAL_ERROR\n\n\nAn internal error occurred\n\n\nRetry or contact the key administrator if problem persists.\n\n\n\n\n\n\nINVALID_INVITATION_CODE\n\n\nThe TSM reported that the invitation code was invalid.\n\n\nRetype or contact the key administrator.\n\n\n\n\n\n\nDEVICE_SETUP_FAILED\n\n\nThe TSM failed to install the endpoint with a fatal error (FATAL, the invitation code is consumed and can not be reused).\n\n\nContact the key administrator and request a new invitation code.\n\n\n\n\n\n\nSERVER_UNREACHABLE\n\n\nThe server communication failed. This is normally because of a network problem.\n\n\nCheck internet connectivity or try again later.\n\n\n\n\n\n\nSDK_INCOMPATIBLE\n\n\nServer replied API INCOMPATIBLE. The TSM reported that the current version of the SDK is too old.\n\n\nupgrade the application.\n\n\n\n\n\n\nSDK_BUSY\n\n\nOne asynchronous method of the API is already running.\n\n\nRetry previous action.\n\n\n\n\n\n\nDEVICE_NOT_ELIGIBLE\n\n\nThe TSM replied NOT ELIGIBLE (FATAL during Setup, the invitation code is consumed and can not be reused).\n\n\nContact the key administrator.\n\n\n\n\n\n\nENDPOINT_NOT_SETUP\n\n\nAttempt to invoke a method which requires an endpoint that is setup.\n\n\nContact the key administrator and request an invitation code.\n\n\n\n\n\n\nVAULT_CORRUPT\n\n\nThe local Seos vault was corrupted and has been reset.\n\n\nRetry or contact the key administrator if problem persists.", 
            "title": "SDK errors"
        }, 
        {
            "location": "/errors/sdk-errors/index.html#background", 
            "text": "These are the error codes that is returned by the SDK", 
            "title": "Background"
        }, 
        {
            "location": "/errors/sdk-errors/index.html#public-error-code", 
            "text": "Code  Description  Recommended action      INTERNAL_ERROR  An internal error occurred  Retry or contact the key administrator if problem persists.    INVALID_INVITATION_CODE  The TSM reported that the invitation code was invalid.  Retype or contact the key administrator.    DEVICE_SETUP_FAILED  The TSM failed to install the endpoint with a fatal error (FATAL, the invitation code is consumed and can not be reused).  Contact the key administrator and request a new invitation code.    SERVER_UNREACHABLE  The server communication failed. This is normally because of a network problem.  Check internet connectivity or try again later.    SDK_INCOMPATIBLE  Server replied API INCOMPATIBLE. The TSM reported that the current version of the SDK is too old.  upgrade the application.    SDK_BUSY  One asynchronous method of the API is already running.  Retry previous action.    DEVICE_NOT_ELIGIBLE  The TSM replied NOT ELIGIBLE (FATAL during Setup, the invitation code is consumed and can not be reused).  Contact the key administrator.    ENDPOINT_NOT_SETUP  Attempt to invoke a method which requires an endpoint that is setup.  Contact the key administrator and request an invitation code.    VAULT_CORRUPT  The local Seos vault was corrupted and has been reset.  Retry or contact the key administrator if problem persists.", 
            "title": "Public error code"
        }, 
        {
            "location": "/errors/status-words/index.html", 
            "text": "Background\n\n\nSeos uses status words defined in ISO 7816 documents, mainly ISO 7816-3 and ISO 7816-4. While the integrating application\ngenerally don't have to care about these errors, they are kept here for reference\n\n\n\n\n\n\n\n\nError\n\n\nMeaning\n\n\n\n\n\n\n\n\n\n\n9000\n\n\nNo error\n\n\n\n\n\n\n6999\n\n\nApplet selection failed\n\n\n\n\n\n\n61xx\n\n\nResponse bytes remaining\n\n\n\n\n\n\n6E00\n\n\nCLA value not supported\n\n\n\n\n\n\n6986\n\n\nCommand not allowed (no current EF)\n\n\n\n\n\n\n6985\n\n\nConditions of use not satisfied\n\n\n\n\n\n\n6C00\n\n\nCorrect Expected Length (Le)\n\n\n\n\n\n\n6984\n\n\nData invalid\n\n\n\n\n\n\n6988\n\n\nSecure messaging data objects incorrect\n\n\n\n\n\n\n6A84\n\n\nNot enough memory space in the file\n\n\n\n\n\n\n6983\n\n\nFile invalid\n\n\n\n\n\n\n6A82\n\n\nFile not found\n\n\n\n\n\n\n6A81\n\n\nFunction not supported\n\n\n\n\n\n\n6A86\n\n\nIncorrect parameters (P1,P2)\n\n\n\n\n\n\n6D00\n\n\nINS value not supported\n\n\n\n\n\n\n6A83\n\n\nRecord not found\n\n\n\n\n\n\n6982\n\n\nSecurity condition not satisfied\n\n\n\n\n\n\n6F00\n\n\nNo precise diagnosis\n\n\n\n\n\n\n6A80\n\n\nWrong data\n\n\n\n\n\n\n6700\n\n\nWrong length\n\n\n\n\n\n\n6B00\n\n\nWrong parameters (P1,P2)", 
            "title": "Seos status words"
        }, 
        {
            "location": "/errors/status-words/index.html#background", 
            "text": "Seos uses status words defined in ISO 7816 documents, mainly ISO 7816-3 and ISO 7816-4. While the integrating application\ngenerally don't have to care about these errors, they are kept here for reference     Error  Meaning      9000  No error    6999  Applet selection failed    61xx  Response bytes remaining    6E00  CLA value not supported    6986  Command not allowed (no current EF)    6985  Conditions of use not satisfied    6C00  Correct Expected Length (Le)    6984  Data invalid    6988  Secure messaging data objects incorrect    6A84  Not enough memory space in the file    6983  File invalid    6A82  File not found    6A81  Function not supported    6A86  Incorrect parameters (P1,P2)    6D00  INS value not supported    6A83  Record not found    6982  Security condition not satisfied    6F00  No precise diagnosis    6A80  Wrong data    6700  Wrong length    6B00  Wrong parameters (P1,P2)", 
            "title": "Background"
        }, 
        {
            "location": "/errors/gatt-errors/index.html", 
            "text": "Background\n\n\nThese are the errors that are returned by the Bluetooth API's in Android (Bluedroid / gatt_api.h). Most of them are taken from the java source code comments, and a few are also from\nnative header file comments.\n\n\nConnection statuses\n\n\n\n\n\n\n\n\nError\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0\n\n\nGATT_CONN_UNKNOWN\n\n\nUnknown / no error\n\n\n\n\n\n\n0x01\n\n\nGATT_CONN_NO_RESOURCES\n\n\nConnection fail for l2cap resource failure\n\n\n\n\n\n\n0x08\n\n\nGATT_CONN_TIMEOUT\n\n\nConnection timeout\n\n\n\n\n\n\n0x13\n\n\nGATT_CONN_TERMINATE_PEER_USER\n\n\nConnection terminate by peer user\n\n\n\n\n\n\n0x16\n\n\nGATT_CONN_TERMINATE_LOCAL_HOST\n\n\nConnection terminated by local host\n\n\n\n\n\n\n0x03E\n\n\nGATT_CONN_FAIL_ESTABLISH\n\n\nConnection fail to establish\n\n\n\n\n\n\n0x22\n\n\nGATT_CONN_LMP_TIMEOUT\n\n\nConnection fail for LMP response timeout\n\n\n\n\n\n\n0x010\n\n\nGATT_CONN_CANCEL\n\n\nL2CAP connection cancelled\n\n\n\n\n\n\n\n\nOperation statuses\n\n\n\n\n\n\n\n\nError\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n0x0000\n\n\nGATT_SUCCESS\n\n\noperation completed successfully\n\n\n\n\n\n\n0x0001\n\n\nGATT_INVALID_HANDLE\n\n\nInvalid handle\n\n\n\n\n\n\n0x0002\n\n\nGATT_READ_NOT_PERMIT\n\n\nGATT read operation not permitted\n\n\n\n\n\n\n0x0003\n\n\nGATT_WRITE_NOT_PERMIT\n\n\nGatt write operation not permitted\n\n\n\n\n\n\n0x0004\n\n\nGATT_INVALID_PDU\n\n\nInvalid protocol data unit\n\n\n\n\n\n\n0x0005\n\n\nGATT_INSUF_AUTHENTICATION\n\n\nInsuficcient authentication for the given operation\n\n\n\n\n\n\n0x0006\n\n\nGATT_REQ_NOT_SUPPORTED\n\n\nThe given request is not supported\n\n\n\n\n\n\n0x0007\n\n\nGATT_INVALID_OFFSET\n\n\nThe read or write operation was requested with an invalid offset\n\n\n\n\n\n\n0x0008\n\n\nGATT_INSUF_AUTHORIZATION\n\n\nInsufficient authorization\n\n\n\n\n\n\n0x0009\n\n\nGATT_PREPARE_Q_FULL\n\n\nPrepare queue full\n\n\n\n\n\n\n0x000a\n\n\nGATT_NOT_FOUND\n\n\nNot long\n\n\n\n\n\n\n0x000b\n\n\nGATT_NOT_LONG\n\n\nNot found\n\n\n\n\n\n\n0x000c\n\n\nGATT_INSUF_KEY_SIZE\n\n\nInsufficient key size\n\n\n\n\n\n\n0x000d\n\n\nGATT_INVALID_ATTR_LEN\n\n\nThe write operation exceeds the maximum length of the attribute\n\n\n\n\n\n\n0x000e\n\n\nGATT_ERR_UNLIKELY\n\n\nError unlikely\n\n\n\n\n\n\n0x000f\n\n\nGATT_INSUF_ENCRYPTION\n\n\nInsufficient encryption for a given operation\n\n\n\n\n\n\n0x0010\n\n\nGATT_UNSUPPORT_GRP_TYPE\n\n\nUnsupported group type\n\n\n\n\n\n\n0x0011\n\n\nGATT_INSUF_RESOURCE\n\n\nInsufficient resource\n\n\n\n\n\n\n0x0087\n\n\nGATT_ILLEGAL_PARAMETER\n\n\nIllegal parameter\n\n\n\n\n\n\n0x0080\n\n\nGATT_NO_RESOURCES\n\n\nNo resources\n\n\n\n\n\n\n0x0081\n\n\nGATT_INTERNAL_ERROR\n\n\nInternal error\n\n\n\n\n\n\n0x0082\n\n\nGATT_WRONG_STATE\n\n\nWrong state\n\n\n\n\n\n\n0x0083\n\n\nGATT_DB_FULL\n\n\nDatabase full\n\n\n\n\n\n\n0x0084\n\n\nGATT_BUSY\n\n\nBusy\n\n\n\n\n\n\n0x0085\n\n\nGATT_ERROR\n\n\nGeneral GATT error\n\n\n\n\n\n\n0x0086\n\n\nGATT_CMD_STARTED\n\n\nCommand started\n\n\n\n\n\n\n0x0088\n\n\nGATT_PENDING\n\n\nPending\n\n\n\n\n\n\n0x0089\n\n\nGATT_AUTH_FAIL\n\n\nAuthentication failure\n\n\n\n\n\n\n0x008a\n\n\nGATT_MORE\n\n\nMore\n\n\n\n\n\n\n0x008b\n\n\nGATT_INVALID_CFG\n\n\nInvalid configuration\n\n\n\n\n\n\n0x008c\n\n\nGATT_SERVICE_STARTED\n\n\nService started\n\n\n\n\n\n\n0x0000\n\n\nGATT_ENCRYPED_MITM\n\n\nEncrypted man in the middle\n\n\n\n\n\n\n0x008d\n\n\nGATT_ENCRYPED_NO_MITM\n\n\nEncrypted no man in the middle\n\n\n\n\n\n\n0x008e\n\n\nGATT_NOT_ENCRYPTED\n\n\nNot encrypted", 
            "title": "GATT errors"
        }, 
        {
            "location": "/errors/gatt-errors/index.html#background", 
            "text": "These are the errors that are returned by the Bluetooth API's in Android (Bluedroid / gatt_api.h). Most of them are taken from the java source code comments, and a few are also from\nnative header file comments.", 
            "title": "Background"
        }, 
        {
            "location": "/errors/gatt-errors/index.html#connection-statuses", 
            "text": "Error  Name  Description      0  GATT_CONN_UNKNOWN  Unknown / no error    0x01  GATT_CONN_NO_RESOURCES  Connection fail for l2cap resource failure    0x08  GATT_CONN_TIMEOUT  Connection timeout    0x13  GATT_CONN_TERMINATE_PEER_USER  Connection terminate by peer user    0x16  GATT_CONN_TERMINATE_LOCAL_HOST  Connection terminated by local host    0x03E  GATT_CONN_FAIL_ESTABLISH  Connection fail to establish    0x22  GATT_CONN_LMP_TIMEOUT  Connection fail for LMP response timeout    0x010  GATT_CONN_CANCEL  L2CAP connection cancelled", 
            "title": "Connection statuses"
        }, 
        {
            "location": "/errors/gatt-errors/index.html#operation-statuses", 
            "text": "Error  Name  Description      0x0000  GATT_SUCCESS  operation completed successfully    0x0001  GATT_INVALID_HANDLE  Invalid handle    0x0002  GATT_READ_NOT_PERMIT  GATT read operation not permitted    0x0003  GATT_WRITE_NOT_PERMIT  Gatt write operation not permitted    0x0004  GATT_INVALID_PDU  Invalid protocol data unit    0x0005  GATT_INSUF_AUTHENTICATION  Insuficcient authentication for the given operation    0x0006  GATT_REQ_NOT_SUPPORTED  The given request is not supported    0x0007  GATT_INVALID_OFFSET  The read or write operation was requested with an invalid offset    0x0008  GATT_INSUF_AUTHORIZATION  Insufficient authorization    0x0009  GATT_PREPARE_Q_FULL  Prepare queue full    0x000a  GATT_NOT_FOUND  Not long    0x000b  GATT_NOT_LONG  Not found    0x000c  GATT_INSUF_KEY_SIZE  Insufficient key size    0x000d  GATT_INVALID_ATTR_LEN  The write operation exceeds the maximum length of the attribute    0x000e  GATT_ERR_UNLIKELY  Error unlikely    0x000f  GATT_INSUF_ENCRYPTION  Insufficient encryption for a given operation    0x0010  GATT_UNSUPPORT_GRP_TYPE  Unsupported group type    0x0011  GATT_INSUF_RESOURCE  Insufficient resource    0x0087  GATT_ILLEGAL_PARAMETER  Illegal parameter    0x0080  GATT_NO_RESOURCES  No resources    0x0081  GATT_INTERNAL_ERROR  Internal error    0x0082  GATT_WRONG_STATE  Wrong state    0x0083  GATT_DB_FULL  Database full    0x0084  GATT_BUSY  Busy    0x0085  GATT_ERROR  General GATT error    0x0086  GATT_CMD_STARTED  Command started    0x0088  GATT_PENDING  Pending    0x0089  GATT_AUTH_FAIL  Authentication failure    0x008a  GATT_MORE  More    0x008b  GATT_INVALID_CFG  Invalid configuration    0x008c  GATT_SERVICE_STARTED  Service started    0x0000  GATT_ENCRYPED_MITM  Encrypted man in the middle    0x008d  GATT_ENCRYPED_NO_MITM  Encrypted no man in the middle    0x008e  GATT_NOT_ENCRYPTED  Not encrypted", 
            "title": "Operation statuses"
        }, 
        {
            "location": "/samples/remote-session/index.html", 
            "text": "Remote session\n\n\nWith the remote session functionality you can implement various ways of accessing the Seos instance on the device. For e.g over HTTP. Below is sample code for how to use this functionality.\n\n\nUsage\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n    \npublic\n \nstatic\n \nclass\n \nRemoteSession\n\n    \n{\n\n\n        \nprivate\n \nstatic\n \nfinal\n \nString\n \nTAG\n \n=\n \nRemoteSession\n.\nclass\n.\ngetName\n();\n\n        \nprivate\n \nReaderSession\n \nreaderSession\n;\n\n\n        \npublic\n \nRemoteSession\n()\n\n        \n{\n\n        \n}\n\n\n        \npublic\n \nApduResult\n \nprocess\n(\nApduCommand\n \ncommand\n)\n\n        \n{\n\n            \nif\n \n(\nisOpen\n())\n\n            \n{\n\n                \nreturn\n \nreaderSession\n.\nprocess\n(\ncommand\n);\n\n            \n}\n\n            \nLog\n.\ne\n(\nTAG\n,\n \nReaderSession is not open\n);\n\n            \nreturn\n \nnull\n;\n\n        \n}\n\n\n        \npublic\n \nboolean\n \nopen\n(\nMobileKeys\n \nmobileKeys\n)\n\n        \n{\n\n            \nif\n \n(\nisOpen\n())\n\n            \n{\n\n                \ntry\n\n                \n{\n\n                    \nreaderSession\n \n=\n \nmobileKeys\n.\nopenReaderSession\n();\n\n                    \nreturn\n \ntrue\n;\n\n                \n}\n\n                \ncatch\n \n(\nMobileKeysException\n \ne\n)\n\n                \n{\n\n                    \nLog\n.\ne\n(\nTAG\n,\n \nError while opening remote session: \n,\n \ne\n);\n\n                \n}\n\n            \n}\n\n            \nLog\n.\ne\n(\nTAG\n,\n \nRemote session is already open\n);\n\n            \nreturn\n \nfalse\n;\n\n        \n}\n\n\n        \npublic\n \nvoid\n \nclose\n()\n\n        \n{\n\n            \nif\n \n(\nreaderSession\n \n!=\n \nnull\n)\n\n            \n{\n\n                \nreaderSession\n.\nclose\n();\n\n            \n}\n\n        \n}\n\n\n        \npublic\n \nboolean\n \nisOpen\n()\n\n        \n{\n\n            \nreturn\n \nreaderSession\n \n!=\n \nnull\n \n \nreaderSession\n.\nisSessionOpen\n();\n\n        \n}\n\n    \n}", 
            "title": "Remote session"
        }, 
        {
            "location": "/samples/remote-session/index.html#remote-session", 
            "text": "With the remote session functionality you can implement various ways of accessing the Seos instance on the device. For e.g over HTTP. Below is sample code for how to use this functionality.", 
            "title": "Remote session"
        }, 
        {
            "location": "/samples/remote-session/index.html#usage", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51      public   static   class   RemoteSession \n     { \n\n         private   static   final   String   TAG   =   RemoteSession . class . getName (); \n         private   ReaderSession   readerSession ; \n\n         public   RemoteSession () \n         { \n         } \n\n         public   ApduResult   process ( ApduCommand   command ) \n         { \n             if   ( isOpen ()) \n             { \n                 return   readerSession . process ( command ); \n             } \n             Log . e ( TAG ,   ReaderSession is not open ); \n             return   null ; \n         } \n\n         public   boolean   open ( MobileKeys   mobileKeys ) \n         { \n             if   ( isOpen ()) \n             { \n                 try \n                 { \n                     readerSession   =   mobileKeys . openReaderSession (); \n                     return   true ; \n                 } \n                 catch   ( MobileKeysException   e ) \n                 { \n                     Log . e ( TAG ,   Error while opening remote session:  ,   e ); \n                 } \n             } \n             Log . e ( TAG ,   Remote session is already open ); \n             return   false ; \n         } \n\n         public   void   close () \n         { \n             if   ( readerSession   !=   null ) \n             { \n                 readerSession . close (); \n             } \n         } \n\n         public   boolean   isOpen () \n         { \n             return   readerSession   !=   null     readerSession . isSessionOpen (); \n         } \n     }", 
            "title": "Usage"
        }, 
        {
            "location": "/seos-access-api-samples/read-adf-metadata/index.html", 
            "text": "This sample code reads the metadata from the passed \nMobileKey\n object. Assuming the correct permissions have been configured on the key.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n    \nprivate\n \nMetadata\n \ngetMetadataFromKey\n(\nMobileKey\n \nkey\n)\n \nthrows\n \nMobileKeysException\n\n    \n{\n\n        \nMobileKeys\n \nmobileKeys\n \n=\n \nMobileKeysApi\n.\ngetInstance\n().\ngetMobileKeys\n();\n\n\n        \nSession\n \nsession\n \n=\n \nnull\n;\n\n        \ntry\n\n        \n{\n\n            \nSessionParameters\n.\nBuilder\n \nbuilder\n \n=\n \nnew\n \nSessionParameters\n.\nBuilder\n()\n\n                    \n.\nsetSelection\n(\nSelect\n.\nextendedSelectAdf\n(\nkey\n.\ngetIdentifier\n().\noid\n()))\n\n                    \n.\nsetPrivacyKeyset\n(\nnew\n \nDisabledPrivacyKeyset\n(\nKeyNumber\n.\nKEY_0\n));\n\n            \nsession\n \n=\n \nmobileKeys\n.\nopenSeosAccessApiSession\n(\nbuilder\n.\nbuild\n());\n\n            \nCommandResult\nMetadata\n \nmetadataResult\n \n=\n \nsession\n.\nexecute\n(\nCommands\n.\ngetSeosObject\n(\nSeosObjects\n.\nMETADATA\n));\n\n            \nif\n \n(\nmetadataResult\n.\nstatus\n()\n \n!=\n \nCommandResult\n.\nStatus\n.\nSUCCESS\n)\n\n            \n{\n\n                \nthrow\n \nnew\n \nMobileKeysException\n(\nInternalErrorCode\n.\nSECURE_ELEMENT_ERROR\n);\n\n            \n}\n\n            \nreturn\n \nmetadataResult\n.\nresponseData\n();\n\n        \n}\n\n        \ncatch\n \n(\nSessionException\n \nse\n)\n\n        \n{\n\n            \nthrow\n \nnew\n \nMobileKeysException\n(\nInternalErrorCode\n.\nSECURE_ELEMENT_ERROR\n,\n \nse\n);\n\n        \n}\n\n        \nfinally\n\n        \n{\n\n            \nif\n \n(\nsession\n \n!=\n \nnull\n)\n\n            \n{\n\n                \nsession\n.\nclose\n();\n\n            \n}\n\n        \n}\n\n    \n}", 
            "title": "Read ADF metadata"
        }, 
        {
            "location": "/seos-access-api-samples/read-write-tags-on-adf/index.html", 
            "text": "This method reads and writes data to tag \n0xFF01\n using no encryption keys\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n    \nprivate\n \nvoid\n \nreadWriteToTag\n(\nMobileKey\n \nkey\n)\n \nthrows\n \nMobileKeysException\n\n    \n{\n\n        \nMobileKeys\n \nmobileKeys\n \n=\n \nMobileKeysApi\n.\ngetInstance\n().\ngetMobileKeys\n();\n\n        \nSeosTag\n \ntag\n \n=\n \nnew\n \nSeosTag\n(\n0xFF01\n);\n\n        \nbyte\n[]\n \ndata\n \n=\n \ngenerateData\n(\n16\n);\n\n\n        \nSession\n \nsession\n \n=\n \nnull\n;\n\n        \ntry\n\n        \n{\n\n            \nSessionParameters\n.\nBuilder\n \nbuilder\n \n=\n \nnew\n \nSessionParameters\n.\nBuilder\n()\n\n                    \n.\nsetSelection\n(\nSelect\n.\nextendedSelectAdf\n(\nkey\n.\ngetIdentifier\n().\noid\n()))\n\n                    \n.\nsetPrivacyKeyset\n(\nnew\n \nDisabledPrivacyKeyset\n(\nKeyNumber\n.\nKEY_0\n));\n\n            \nsession\n \n=\n \nmobileKeys\n.\nopenSeosAccessApiSession\n(\nbuilder\n.\nbuild\n());\n\n\n            \nCommandResult\nVoid\n \nputDataResult\n \n=\n \nsession\n.\nexecute\n(\nCommands\n.\nputSeosObject\n(\n\n                    \nnew\n \nDataObject\n(\ntag\n,\n \ndata\n)));\n\n            \nif\n \n(\nputDataResult\n.\nstatus\n()\n \n!=\n \nCommandResult\n.\nStatus\n.\nSUCCESS\n)\n\n            \n{\n\n                \nthrow\n \nnew\n \nMobileKeysException\n(\nInternalErrorCode\n.\nSECURE_ELEMENT_ERROR\n);\n\n            \n}\n\n\n            \nCommandResult\nDataObject\n \ngetDataResult\n \n=\n \nsession\n.\nexecute\n(\nCommands\n.\ngetSeosObject\n(\nSeosObjects\n.\ndataObject\n(\ntag\n)));\n\n            \nif\n \n(\ngetDataResult\n.\nstatus\n()\n \n!=\n \nCommandResult\n.\nStatus\n.\nSUCCESS\n \n||\n \nArrays\n.\nequals\n(\ngetDataResult\n.\nresponseData\n().\nseosData\n(),\n \ndata\n))\n\n            \n{\n\n                \nthrow\n \nnew\n \nMobileKeysException\n(\nInternalErrorCode\n.\nSECURE_ELEMENT_ERROR\n);\n\n            \n}\n\n            \nLOGGER\n.\ndebug\n(\nGot object from FF01 {}\n,\n \ngetDataResult\n.\ntoHex\n());\n\n\n        \n}\n\n        \ncatch\n \n(\nSessionException\n \nse\n)\n\n        \n{\n\n            \nthrow\n \nnew\n \nMobileKeysException\n(\nInternalErrorCode\n.\nSECURE_ELEMENT_ERROR\n,\n \nse\n);\n\n        \n}\n\n        \nfinally\n\n        \n{\n\n            \nif\n \n(\nsession\n \n!=\n \nnull\n)\n\n            \n{\n\n                \nsession\n.\nclose\n();\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n    \nprivate\n \nbyte\n[]\n \ngenerateData\n(\nint\n \nsize\n)\n\n    \n{\n\n        \nbyte\n[]\n \nbytes\n \n=\n \nnew\n \nbyte\n[\nsize\n];\n\n        \nnew\n \nSecureRandom\n().\nnextBytes\n(\nbytes\n);\n\n        \nreturn\n \nbytes\n;\n\n    \n}", 
            "title": "Read/Write tag on ADF"
        }, 
        {
            "location": "/seos-access-api-samples/accessing-remote-seos/index.html", 
            "text": "Reader session\n\n\nWith the Seos Access API you can access another seos instance remotely. For e.g over HTTP. Below is sample code for how to use this functionality.\n\n\nUsage\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n        \n// class fields\n\n        \nHttpApduConnection\n \nhttpApduConnection\n \n=\n \nnew\n \nHttpApduConnection\n(\nnew\n \nHttpClientImpl\n(\ntrue\n),\n \nhttp://\nYour local IPv4\n:8090\n,\n \nXXXX-XXXX-XXXX-XXXX\n);\n\n        \nprivate\n \nfinal\n \nScheduledExecutorService\n \nSCHEDULED_EXECUTOR_SERVICE\n \n=\n \nExecutors\n.\nnewSingleThreadScheduledExecutor\n(\nnew\n \nThreadFactory\n()\n\n        \n{\n\n            \n@Override\n\n            \npublic\n \nThread\n \nnewThread\n(\nRunnable\n \nr\n)\n\n            \n{\n\n                \nreturn\n \nnew\n \nThread\n(\nr\n,\n \nHTTP ApduConnection Thread\n);\n\n            \n}\n\n        \n});\n\n\n        \n// inside method where we want to interact with the remote seos\n\n        \nSCHEDULED_EXECUTOR_SERVICE\n.\nexecute\n(\nnew\n \nRunnable\n()\n\n        \n{\n\n            \n@Override\n\n            \npublic\n \nvoid\n \nrun\n()\n\n            \n{\n\n                \ntry\n\n                \n{\n\n                    \nhttpApduConnection\n.\ncreateEndpoint\n();\n\n                \n}\n\n                \ncatch\n \n(\nSeosTsmCommunicationException\n \ne\n)\n\n                \n{\n\n                    \ne\n.\nprintStackTrace\n();\n\n                \n}\n\n\n            \n}\n\n        \n});\n\n\n\n\n\n\n\nHttpApduConnection.java\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\npackage\n \ncom.assaabloy.mobilekeys.api.simulator\n;\n\n\n\nimport\n \ncom.assaabloy.mobilekeys.api.internal.http.HttpClient\n;\n\n\nimport\n \ncom.assaabloy.mobilekeys.api.internal.http.HttpClientResponse\n;\n\n\nimport\n \ncom.assaabloy.mobilekeys.api.internal.http.SeosTsmCommunicationException\n;\n\n\nimport\n \ncom.assaabloy.seos.access.ApduConnection\n;\n\n\nimport\n \ncom.assaabloy.seos.access.apdu.ApduCommand\n;\n\n\nimport\n \ncom.assaabloy.seos.access.apdu.ApduResult\n;\n\n\nimport\n \norg.slf4j.Logger\n;\n\n\nimport\n \norg.slf4j.LoggerFactory\n;\n\n\n\nimport\n \njava.io.IOException\n;\n\n\n\npublic\n \nclass\n \nHttpApduConnection\n \nimplements\n \nApduConnection\n\n\n{\n\n    \nprivate\n \nstatic\n \nfinal\n \nLogger\n \nLOGGER\n \n=\n \nLoggerFactory\n.\ngetLogger\n(\nHttpApduConnection\n.\nclass\n);\n\n    \nprivate\n \nstatic\n \nfinal\n \nString\n \nENDPOINT_PATH\n \n=\n \nseos-simulator/endpoint\n;\n\n    \nprivate\n \nstatic\n \nfinal\n \nString\n \nAPPLICATION_ID\n \n=\n \nAAMK\n;\n\n    \nprivate\n \nstatic\n \nfinal\n \nString\n \nAPP_STARTUP_PATH\n \n=\n \napplicationStartup\n;\n\n    \nprivate\n \nstatic\n \nfinal\n \nString\n \nSETUP_PATH\n \n=\n \nseos-simulator/setup\n;\n\n    \nprivate\n \nstatic\n \nfinal\n \nString\n \nSESSION_PATH\n \n=\n \nseos-simulator/session\n;\n\n    \nprivate\n \nstatic\n \nfinal\n \nString\n \nOPEN_PATH\n \n=\n \nopen\n;\n\n    \nprivate\n \nstatic\n \nfinal\n \nString\n \nCLOSE_PATH\n \n=\n \nclose\n;\n\n    \nprivate\n \nstatic\n \nfinal\n \nString\n \nAPDU_PATH\n \n=\n \napdu\n;\n\n    \nprivate\n \nfinal\n \nHttpClient\n \nhttpClient\n;\n\n    \nprivate\n \nfinal\n \nString\n \nhost\n;\n\n    \nprivate\n \nfinal\n \nString\n \ninvitationCode\n;\n\n    \nprivate\n \nString\n \ncurrentSessionId\n;\n\n    \nprivate\n \nboolean\n \nisOpen\n;\n\n\n\n    \npublic\n \nHttpApduConnection\n(\nHttpClient\n \nhttpClient\n,\n \nString\n \nhost\n,\n \nString\n \ninvitationCode\n)\n\n    \n{\n\n        \nthis\n.\nhttpClient\n \n=\n \nhttpClient\n;\n\n        \nthis\n.\nhost\n \n=\n \nhost\n;\n\n        \nthis\n.\ninvitationCode\n \n=\n \ninvitationCode\n;\n\n    \n}\n\n\n    \npublic\n \nvoid\n \ncreateEndpoint\n()\n \nthrows\n \nSeosTsmCommunicationException\n\n    \n{\n\n        \nHttpClientResponse\n \nhttpClientResponse\n \n=\n \nhttpClient\n.\nsendRequest\n(\nhost\n \n+\n \n/\n \n+\n \nSETUP_PATH\n \n+\n \n/\n \n+\n \nAPPLICATION_ID\n \n+\n \n/\n \n+\n \ninvitationCode\n,\n \ntext/plain\n,\n \n,\n \nHttpClient\n.\nHttpMethod\n.\nPOST\n);\n\n        \nLOGGER\n.\ndebug\n(\nStatus: {} Body: {}\n,\n \nhttpClientResponse\n.\nstatusCode\n(),\n \nhttpClientResponse\n.\nbody\n());\n\n    \n}\n\n\n    \npublic\n \nvoid\n \nupdateEndpoint\n()\n \nthrows\n \nSeosTsmCommunicationException\n\n    \n{\n\n        \nHttpClientResponse\n \nhttpClientResponse\n \n=\n \nhttpClient\n.\nsendRequest\n(\nhost\n \n+\n \n/\n \n+\n \nENDPOINT_PATH\n \n+\n \n/\n \n+\n \ninvitationCode\n,\n \ntext/plain\n,\n \n,\n \nHttpClient\n.\nHttpMethod\n.\nPOST\n);\n\n        \nLOGGER\n.\ndebug\n(\nStatus: {} Body: {}\n,\n \nhttpClientResponse\n.\nstatusCode\n(),\n \nhttpClientResponse\n.\nbody\n());\n\n    \n}\n\n\n    \npublic\n \nvoid\n \napplicationStartup\n()\n \nthrows\n \nSeosTsmCommunicationException\n\n    \n{\n\n        \nHttpClientResponse\n \nhttpClientResponse\n \n=\n \nhttpClient\n.\nsendRequest\n(\nhost\n \n+\n \n/\n \n+\n \nENDPOINT_PATH\n \n+\n \n/\n \n+\n \ninvitationCode\n \n+\n \n/\n \n+\n \nAPP_STARTUP_PATH\n,\n \ntext/plain\n,\n \n,\n \nHttpClient\n.\nHttpMethod\n.\nPOST\n);\n\n        \nLOGGER\n.\ndebug\n(\nStatus: {} Body: {}\n,\n \nhttpClientResponse\n.\nstatusCode\n(),\n \nhttpClientResponse\n.\nbody\n());\n\n    \n}\n\n\n    \npublic\n \nvoid\n \nopen\n()\n \nthrows\n \nSeosTsmCommunicationException\n\n    \n{\n\n        \nHttpClientResponse\n \nhttpClientResponse\n \n=\n \nhttpClient\n.\nsendRequest\n(\nhost\n \n+\n \n/\n \n+\n \nSESSION_PATH\n \n+\n \n/\n \n+\n \nOPEN_PATH\n \n+\n \n/\n \n+\n \ninvitationCode\n,\n \ntext/plain\n,\n \n,\n \nHttpClient\n.\nHttpMethod\n.\nPOST\n);\n\n        \ncurrentSessionId\n \n=\n \nhttpClientResponse\n.\nbody\n();\n\n        \nLOGGER\n.\ndebug\n(\nStatus: {} Body: {}\n,\n \nhttpClientResponse\n.\nstatusCode\n(),\n \nhttpClientResponse\n.\nbody\n());\n\n        \nif\n \n(\nhttpClientResponse\n.\nisSuccessful\n())\n\n        \n{\n\n            \nisOpen\n \n=\n \ntrue\n;\n\n        \n}\n\n    \n}\n\n\n    \npublic\n \nvoid\n \nclose\n()\n \nthrows\n \nSeosTsmCommunicationException\n\n    \n{\n\n        \nHttpClientResponse\n \nhttpClientResponse\n \n=\n \nhttpClient\n.\nsendRequest\n(\nhost\n \n+\n \n/\n \n+\n \nSESSION_PATH\n \n+\n \n/\n \n+\n \nCLOSE_PATH\n \n+\n \n/\n \n+\n \ncurrentSessionId\n,\n \ntext/plain\n,\n \n,\n \nHttpClient\n.\nHttpMethod\n.\nPOST\n);\n\n        \nLOGGER\n.\ndebug\n(\nStatus: {} Body: {}\n,\n \nhttpClientResponse\n.\nstatusCode\n(),\n \nhttpClientResponse\n.\nbody\n());\n\n        \ncurrentSessionId\n \n=\n \nnull\n;\n\n    \n}\n\n\n    \n@Override\n\n    \npublic\n \nApduResult\n \nsend\n(\nApduCommand\n \napduCommand\n)\n \nthrows\n \nIOException\n\n    \n{\n\n        \ntry\n\n        \n{\n\n            \nHttpClientResponse\n \nhttpClientResponse\n \n=\n \nhttpClient\n.\nsendRequest\n(\nhost\n \n+\n \n/\n \n+\n \nSESSION_PATH\n \n+\n \n/\n \n+\n \ncurrentSessionId\n \n+\n \n/\n \n+\n \nAPDU_PATH\n \n+\n \n/\n \n+\n \napduCommand\n.\ntoHexString\n(),\n \ntext/plain\n,\n \n,\n \nHttpClient\n.\nHttpMethod\n.\nPOST\n);\n\n            \nreturn\n \nApduResult\n.\nparseHexString\n(\nhttpClientResponse\n.\nbody\n());\n\n        \n}\n\n        \ncatch\n \n(\nSeosTsmCommunicationException\n \ne\n)\n\n        \n{\n\n            \nthrow\n \nnew\n \nIOException\n(\ne\n);\n\n        \n}\n\n    \n}\n\n\n    \n@Override\n\n    \npublic\n \nboolean\n \nrequiresSelectAid\n()\n\n    \n{\n\n        \nreturn\n \ntrue\n;\n\n    \n}\n\n\n}", 
            "title": "Accessing a Seos over HTTP"
        }, 
        {
            "location": "/seos-access-api-samples/accessing-remote-seos/index.html#reader-session", 
            "text": "With the Seos Access API you can access another seos instance remotely. For e.g over HTTP. Below is sample code for how to use this functionality.", 
            "title": "Reader session"
        }, 
        {
            "location": "/seos-access-api-samples/accessing-remote-seos/index.html#usage", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28          // class fields \n         HttpApduConnection   httpApduConnection   =   new   HttpApduConnection ( new   HttpClientImpl ( true ),   http:// Your local IPv4 :8090 ,   XXXX-XXXX-XXXX-XXXX ); \n         private   final   ScheduledExecutorService   SCHEDULED_EXECUTOR_SERVICE   =   Executors . newSingleThreadScheduledExecutor ( new   ThreadFactory () \n         { \n             @Override \n             public   Thread   newThread ( Runnable   r ) \n             { \n                 return   new   Thread ( r ,   HTTP ApduConnection Thread ); \n             } \n         }); \n\n         // inside method where we want to interact with the remote seos \n         SCHEDULED_EXECUTOR_SERVICE . execute ( new   Runnable () \n         { \n             @Override \n             public   void   run () \n             { \n                 try \n                 { \n                     httpApduConnection . createEndpoint (); \n                 } \n                 catch   ( SeosTsmCommunicationException   e ) \n                 { \n                     e . printStackTrace (); \n                 } \n\n             } \n         });    HttpApduConnection.java   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94 package   com.assaabloy.mobilekeys.api.simulator ;  import   com.assaabloy.mobilekeys.api.internal.http.HttpClient ;  import   com.assaabloy.mobilekeys.api.internal.http.HttpClientResponse ;  import   com.assaabloy.mobilekeys.api.internal.http.SeosTsmCommunicationException ;  import   com.assaabloy.seos.access.ApduConnection ;  import   com.assaabloy.seos.access.apdu.ApduCommand ;  import   com.assaabloy.seos.access.apdu.ApduResult ;  import   org.slf4j.Logger ;  import   org.slf4j.LoggerFactory ;  import   java.io.IOException ;  public   class   HttpApduConnection   implements   ApduConnection  { \n     private   static   final   Logger   LOGGER   =   LoggerFactory . getLogger ( HttpApduConnection . class ); \n     private   static   final   String   ENDPOINT_PATH   =   seos-simulator/endpoint ; \n     private   static   final   String   APPLICATION_ID   =   AAMK ; \n     private   static   final   String   APP_STARTUP_PATH   =   applicationStartup ; \n     private   static   final   String   SETUP_PATH   =   seos-simulator/setup ; \n     private   static   final   String   SESSION_PATH   =   seos-simulator/session ; \n     private   static   final   String   OPEN_PATH   =   open ; \n     private   static   final   String   CLOSE_PATH   =   close ; \n     private   static   final   String   APDU_PATH   =   apdu ; \n     private   final   HttpClient   httpClient ; \n     private   final   String   host ; \n     private   final   String   invitationCode ; \n     private   String   currentSessionId ; \n     private   boolean   isOpen ; \n\n\n     public   HttpApduConnection ( HttpClient   httpClient ,   String   host ,   String   invitationCode ) \n     { \n         this . httpClient   =   httpClient ; \n         this . host   =   host ; \n         this . invitationCode   =   invitationCode ; \n     } \n\n     public   void   createEndpoint ()   throws   SeosTsmCommunicationException \n     { \n         HttpClientResponse   httpClientResponse   =   httpClient . sendRequest ( host   +   /   +   SETUP_PATH   +   /   +   APPLICATION_ID   +   /   +   invitationCode ,   text/plain ,   ,   HttpClient . HttpMethod . POST ); \n         LOGGER . debug ( Status: {} Body: {} ,   httpClientResponse . statusCode (),   httpClientResponse . body ()); \n     } \n\n     public   void   updateEndpoint ()   throws   SeosTsmCommunicationException \n     { \n         HttpClientResponse   httpClientResponse   =   httpClient . sendRequest ( host   +   /   +   ENDPOINT_PATH   +   /   +   invitationCode ,   text/plain ,   ,   HttpClient . HttpMethod . POST ); \n         LOGGER . debug ( Status: {} Body: {} ,   httpClientResponse . statusCode (),   httpClientResponse . body ()); \n     } \n\n     public   void   applicationStartup ()   throws   SeosTsmCommunicationException \n     { \n         HttpClientResponse   httpClientResponse   =   httpClient . sendRequest ( host   +   /   +   ENDPOINT_PATH   +   /   +   invitationCode   +   /   +   APP_STARTUP_PATH ,   text/plain ,   ,   HttpClient . HttpMethod . POST ); \n         LOGGER . debug ( Status: {} Body: {} ,   httpClientResponse . statusCode (),   httpClientResponse . body ()); \n     } \n\n     public   void   open ()   throws   SeosTsmCommunicationException \n     { \n         HttpClientResponse   httpClientResponse   =   httpClient . sendRequest ( host   +   /   +   SESSION_PATH   +   /   +   OPEN_PATH   +   /   +   invitationCode ,   text/plain ,   ,   HttpClient . HttpMethod . POST ); \n         currentSessionId   =   httpClientResponse . body (); \n         LOGGER . debug ( Status: {} Body: {} ,   httpClientResponse . statusCode (),   httpClientResponse . body ()); \n         if   ( httpClientResponse . isSuccessful ()) \n         { \n             isOpen   =   true ; \n         } \n     } \n\n     public   void   close ()   throws   SeosTsmCommunicationException \n     { \n         HttpClientResponse   httpClientResponse   =   httpClient . sendRequest ( host   +   /   +   SESSION_PATH   +   /   +   CLOSE_PATH   +   /   +   currentSessionId ,   text/plain ,   ,   HttpClient . HttpMethod . POST ); \n         LOGGER . debug ( Status: {} Body: {} ,   httpClientResponse . statusCode (),   httpClientResponse . body ()); \n         currentSessionId   =   null ; \n     } \n\n     @Override \n     public   ApduResult   send ( ApduCommand   apduCommand )   throws   IOException \n     { \n         try \n         { \n             HttpClientResponse   httpClientResponse   =   httpClient . sendRequest ( host   +   /   +   SESSION_PATH   +   /   +   currentSessionId   +   /   +   APDU_PATH   +   /   +   apduCommand . toHexString (),   text/plain ,   ,   HttpClient . HttpMethod . POST ); \n             return   ApduResult . parseHexString ( httpClientResponse . body ()); \n         } \n         catch   ( SeosTsmCommunicationException   e ) \n         { \n             throw   new   IOException ( e ); \n         } \n     } \n\n     @Override \n     public   boolean   requiresSelectAid () \n     { \n         return   true ; \n     }  }", 
            "title": "Usage"
        }, 
        {
            "location": "/seos-access-api-samples/credential-for-test/index.html", 
            "text": "This is the specific test credential used with the above test code that can be issued via a POST to the TSM \nmobile-keys-management/credential/\n endpoint\n\n\n\n\nThe endpoint id here is \n4106051\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n{\n\n    \nendpointId\n:\n \n4106051\n,\n\n    \nseosData\n:\n \n{\n\n        \noid\n:\n \n0202020202020202\n,\n\n        \ndiversifier\n:\n \n,\n\n        \naccessListPermissions\n:\n \n{\n\n            \ngetPermissions\n:\n \n[],\n\n            \nputPermissions\n:\n \n[]\n\n        \n},\n\n        \nkeysetObjectAccessGroups\n:\n \n[\n\n                                     \n{\n\n                                         \nComment\n:\n \nKey Zero is the privacy key\n,\n\n                                         \nputPermissions\n:\n \n[],\n\n                                         \nkeysetObjects\n:\n \n[\n\n                                                           \n{\n\n                                                               \ntype\n:\n \nPRIVACY\n,\n\n                                                               \ncontact\n:\n \ntrue\n,\n\n                                                               \ncontactless\n:\n \ntrue\n,\n\n                                                               \nkeyData\n:\n \n{\n\n                                                                   \ntype\n:\n \nVALUES\n,\n\n                                                                   \nmacKey\n:\n \n8AA83BF8CBDA10620BC1BF19FBB6CD58\n,\n\n                                                                   \nencKey\n:\n \n5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A\n\n                                                               \n},\n\n                                                               \nkeyNumber\n:\n \nKEY_0\n\n                                                           \n},\n\n                                                           \n{\n\n                                                               \nComment\n:\n \nKey One is the Auth key from CONTACT only\n,\n\n                                                               \ntype\n:\n \nAUTHENTICATION\n,\n\n                                                               \ncontact\n:\n \ntrue\n,\n\n                                                               \ncontactless\n:\n \nfalse\n,\n\n                                                               \noptional\n:\n \nfalse\n,\n\n                                                               \nkeyData\n:\n \n{\n\n                                                                   \ntype\n:\n \nVALUES\n,\n\n                                                                   \nmacKey\n:\n \nF5582EADD895225DC71D080E19338A25\n,\n\n                                                                   \nencKey\n:\n \nE0F75D03506A735C93DF39113D18532F\n\n                                                               \n},\n\n                                                               \nkeyNumber\n:\n \nKEY_1\n\n                                                           \n},\n\n                                                           \n{\n\n                                                               \nComment\n:\n \nKey Two is the Auth key from CONTACTLESS only\n,\n\n                                                               \ntype\n:\n \nAUTHENTICATION\n,\n\n                                                               \ncontact\n:\n \nfalse\n,\n\n                                                               \ncontactless\n:\n \ntrue\n,\n\n                                                               \noptional\n:\n \nfalse\n,\n\n                                                               \nkeyData\n:\n \n{\n\n                                                                   \ntype\n:\n \nVALUES\n,\n\n                                                                   \nmacKey\n:\n \n11BDB88E534FF02CA4E77E858DCCD37E\n,\n\n                                                                   \nencKey\n:\n \n269C555F45BF3EE0095EA1E385713131\n\n                                                               \n},\n\n                                                               \nkeyNumber\n:\n \nKEY_2\n\n                                                           \n}\n\n                                                           \n]\n\n                                     \n}\n\n                                     \n],\n\n        \nmetadata\n:\n \n{\n\n            \nlabel\n:\n \nSeos test vectors - Plain\n,\n\n            \nissuer\n:\n \n01\n,\n\n            \ntype\n:\n \nLEGACY\n,\n\n            \npermissions\n:\n \n{\n\n                \ngetPermissions\n:\n \n[\n\n                                   \n{\n\n                                       \ntype\n:\n \nINTERFACE\n,\n\n                                       \nvalue\n:\n \nALWAYS_ACCESS\n\n                                   \n}\n\n                                   \n],\n\n                \nputPermissions\n:\n \n[]\n\n            \n},\n\n            \nadditionalFields\n:\n \n[]\n\n        \n},\n\n        \ndataObjectAccessGroups\n:\n \n[\n\n                                   \n{\n\n                                       \nComment\n:\n \nFF01 is Readable from CONTACT only (key1), writable from CONTACTLESS (key2)\n,\n\n                                       \npermissions\n:\n \n{\n\n                                           \ngetPermissions\n:\n \n[\n\n                                                              \n{\n\n                                                                  \ntype\n:\n \nKEY\n,\n\n                                                                  \nkeyNumber\n:\n \nKEY_1\n\n                                                              \n}\n\n                                                              \n],\n\n                                           \nputPermissions\n:\n \n[\n\n                                                              \n{\n\n                                                                  \ntype\n:\n \nKEY\n,\n\n                                                                  \nkeyNumber\n:\n \nKEY_2\n\n                                                              \n}\n\n                                                              \n]\n\n                                       \n},\n\n                                       \ndataObjects\n:\n \n[\n\n                                                       \n{\n\n                                                           \ntag\n:\n \nFF01\n,\n\n                                                           \ndata\n:\n \n040411223344\n\n                                                       \n}\n\n                                                       \n]\n\n                                   \n}\n\n                                   \n]\n\n    \n}\n\n\n}", 
            "title": "Credential for test"
        }, 
        {
            "location": "/seos-access-api-samples/ake-session-setup/index.html", 
            "text": "Using AKE to authenticate to a card requires an active session to the Terminal. The following example code sets up basic\nprivacy keys and a session to the Terminal using the MobileKeysSeosProvider API. A second MobileKeysSeosProvider is then\nrequired to create the APDU connection session to the Card.\n\n\nThe code has been tested and works using the example keys below the code example.\n\n\nOverview of the code\n\n\n\n\nSetup privacy keys using the test vectors (same as in the json keys below)\n\n\nOpen a session to the Mobile Access SDK default MobileKeysSeosProvider\n\n\nThis instance of Seos is expected to have the \"Terminal side test key\"\n\n\nSetup the custom Card Connection (not provided by the example code)\n\n\nThis instance of Seos is expected to have the \"Card side test key\"\n\n\nEstablish a connection to the Card by utilizing the already connected Terminal Connection MobileKeysSeosProvider\n\n\nRead Tag FF00 from the Card\n\n\nClose the connection\n\n\n\n\nJava sample code for setting up a Card session\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n    \nprivate\n \nvoid\n \ndoTerminalAke\n(\nSeosConnection\n \ncardSeosConnection\n)\n \nthrows\n \nMobileKeysException\n\n        \n{\n\n\n            \nSession\n \nsession\n \n=\n \nnull\n;\n\n            \ntry\n\n            \n{\n\n                \n//replace this with your reference of the MobileKeys object\n\n                \nMobileKeys\n \nmobileKeys\n \n=\n \nMobileKeysImpl\n.\nthis\n;\n\n                \n//openSeosAccessApiSession() opens a session to the local seos on device\n\n                \nsession\n \n=\n \nmobileKeys\n.\nopenSeosAccessApiSession\n(\nnew\n \nSessionParameters\n.\nBuilder\n()\n\n                        \n.\nsetPrivacyKeyset\n(\nnew\n \nPlainPrivacyKeyset\n(\nKeyNumber\n.\nKEY_0\n,\n\n                                \nHexUtils\n.\ntoBytes\n(\nTerminal privacy enc key here\n),\n\n                                \nHexUtils\n.\ntoBytes\n(\nTerminal privacy mac key here\n)))\n\n                        \n//ADF from iOS SDK documentation has no authentication but you should put the appropriate values here to enable local secure messaging\n\n                        \n.\nsetAuthenticationKeyset\n(\nnew\n \nPlainAuthenticationKeyset\n(\nKeyNumber\n.\nKEY_1\n,\n \nfalse\n,\n \nHexUtils\n.\ntoBytes\n(\nAppropriate terminal auth enc key here\n),\n \nHexUtils\n.\ntoBytes\n(\nAppropriate terminal auth mac key here\n)))\n\n                        \n.\nsetSelection\n(\nSelect\n.\nselectAdf\n(\nnew\n \nOid\n(\nHexUtils\n.\ntoBytes\n(\nOID of terminal ADF with AKE keyset object\n))))\n\n                        \n.\nbuild\n());\n\n\n                \nSessionParameters\n \ncardSessionParameters\n \n=\n \nnew\n \nSessionParameters\n.\nBuilder\n()\n\n                        \n.\nsetPrivacyKeyset\n(\nnew\n \nPlainPrivacyKeyset\n(\nKeyNumber\n.\nKEY_0\n,\n\n                                \nHexUtils\n.\ntoBytes\n(\nCard privacy enc key here\n),\n\n                                \nHexUtils\n.\ntoBytes\n(\nCard privacy mac key here\n)))\n\n                        \n//You don\nt need to set an authentication keyset here as this is replaced by AKE.\n\n                        \n.\nsetSelection\n(\nSelect\n.\nselectAdf\n(\nnew\n \nOid\n(\nHexUtils\n.\ntoBytes\n(\nOID of card ADF with AKE keyset object\n))))\n\n                        \n.\nbuild\n();\n\n                \nCommandResult\nSession\n \ncommandResult\n \n=\n \nsession\n.\nexecute\n(\nCommands\n.\nauthenticatedKeyExchangeInTerminalMode\n(\n\n                        \nnew\n \nTerminalAkeParameters\n.\nBuilder\n()\n\n                                \n.\nsetCardSessionParameters\n(\ncardSessionParameters\n)\n\n                                \n.\nsetCardGlobalKey\n(\nfalse\n)\n\n                                \n.\nsetCardKeyNumber\n(\nKeyNumber\n.\nKEY_4\n)\n\n                                \n.\nsetTerminalGlobalKey\n(\nfalse\n)\n\n                                \n.\nsetTerminalKeyNumber\n(\nKeyNumber\n.\nKEY_4\n)\n\n                                \n.\nsetCardSeosConnection\n(\ncardSeosConnection\n)\n\n                                \n.\nbuild\n()\n\n                \n));\n\n\n\n                \nif\n \n(\ncommandResult\n.\nhasResponseData\n())\n\n                \n{\n\n                    \nSession\n \ncardSession\n \n=\n \ncommandResult\n.\nresponseData\n();\n\n                    \n//We are ready to read stuff from cardSession\n\n\n                \n}\n\n                \nelse\n\n                \n{\n\n                    \n//failed\n\n                \n}\n\n\n            \n}\n\n            \ncatch\n \n(\nSessionException\n \ne\n)\n\n            \n{\n\n                \nthrow\n \nnew\n \nIllegalStateException\n(\nFailed to establish session\n,\n \ne\n);\n\n            \n}\n\n            \nfinally\n\n            \n{\n\n                \nif\n \n(\nsession\n \n!=\n \nnull\n)\n\n                \n{\n\n                    \nsession\n.\nclose\n();\n\n                \n}\n\n            \n}\n\n        \n}\n\n\n\n\n\n\n\nTerminal side test key\n\n\nTerminal test key with AKE data on KEY 4.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n{\n\n\nendpointId\n:\n \n3342568\n,\n\n\nseosData\n:\n \n{\n\n    \noid\n:\n \n0202020202020202\n,\n\n    \ndiversifier\n:\n \n049668A1761B80\n,\n\n    \naccessListPermissions\n:\n \n{\n\n        \ngetPermissions\n:\n \n[],\n\n        \nputPermissions\n:\n \n[]\n\n    \n},\n\n    \nkeysetObjectAccessGroups\n:\n \n[{\n\n        \nputPermissions\n:\n \n[],\n\n        \nkeysetObjects\n:\n \n[{\n\n            \ntype\n:\n \nPRIVACY\n,\n\n            \ncontact\n:\n \ntrue\n,\n\n            \ncontactless\n:\n \ntrue\n,\n\n            \nkeyData\n:\n \n{\n\n                \ntype\n:\n \nVALUES\n,\n\n                \nmacKey\n:\n \n8aa83bf8cbda10620bc1bf19fbb6cd58\n,\n\n                \nencKey\n:\n \n5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A\n\n            \n},\n\n            \nkeyNumber\n:\n \nKEY_0\n\n        \n},\n\n        \n{\n\n            \ntype\n:\n \nAUTHENTICATION\n,\n\n            \ncontact\n:\n \ntrue\n,\n\n            \ncontactless\n:\n \ntrue\n,\n\n            \noptional\n:\n \nfalse\n,\n\n            \nkeyData\n:\n \n{\n\n                \ntype\n:\n \nVALUES\n,\n\n                \nmacKey\n:\n \nF5582EADD895225DC71D080E19338A25\n,\n\n                \nencKey\n:\n \nE0F75D03506A735C93DF39113D18532F\n\n            \n},\n\n            \nkeyNumber\n:\n \nKEY_1\n\n        \n},\n\n        \n{\n\n            \ntype\n:\n \nAUTHENTICATION\n,\n\n            \ncontact\n:\n \ntrue\n,\n\n            \ncontactless\n:\n \ntrue\n,\n\n            \noptional\n:\n \nfalse\n,\n\n            \nkeyData\n:\n \n{\n\n                \ntype\n:\n \nVALUES\n,\n\n                \nmacKey\n:\n \n11bdb88e534ff02ca4e77e858dccd37e\n,\n\n                \nencKey\n:\n \n269c555f45bf3ee0095ea1e385713131\n\n            \n},\n\n            \nkeyNumber\n:\n \nKEY_2\n\n        \n},\n\n        \n{\n\n            \ntype\n:\n \nAKE\n,\n\n            \nkeyNumber\n:\n \nKEY_4\n,\n\n            \ncontact\n:\n \ntrue\n,\n\n            \ncontactless\n:\n \ntrue\n,\n\n            \nkeyData\n:\n \n{\n\n                \ntype\n:\n \nVALUES\n,\n\n                \nprivatePoint\n:\n \n79578FC9F2A7CD688D86E3FA272489B7CF2CF7A5DB6589D0F320CC43D15612A3\n\n            \n},\n\n            \ncertificate\n:\n \n7F21819A7F4E54420211227F494D06082A8648CE3D030107864104B95C24D84E3F88652B2984C737771126F92809E23E08AA70376683C6035EAEB0A89746181E1F956BBF8CD8D21883E37A0D9FAE452732EBDD578E521900AC2BF35F3740AB03CE6554C4774847DD703439488D632E75E7A00D86CB61A9F4A25CACAA89CE5C9820ABDF0F69DB6A43967C92CC66662045D0B178DDABF309D1195464A3C89E\n,\n\n            \nifdRootPublicKey\n:\n \n04B16BA7C60B2811FB8BAD86400189BBB695EA2D9801D610F0A125CBEC6D86F96ECF3EE259A4FF27D7DABF294ADF27F1DB507A93B5DB33BA666E75D1AD46668EF8\n,\n\n          \nterminalPermissions\n:\n \n[{\n\n              \ntype\n:\n \nINTERFACE\n,\n\n              \nvalue\n:\n \nALWAYS_ACCESS\n\n          \n}]\n\n        \n}]\n\n    \n}],\n\n    \nmetadata\n:\n \n{\n\n        \nlabel\n:\n \nTerminal Seos\n,\n\n        \nissuer\n:\n \n01\n,\n\n        \ntype\n:\n \nLEGACY\n,\n\n        \npermissions\n:\n \n{\n\n            \ngetPermissions\n:\n \n[],\n\n            \nputPermissions\n:\n \n[]\n\n        \n},\n\n      \nadditionalFields\n:[]\n\n    \n},\n\n    \ndataObjectAccessGroups\n:\n \n[{\n\n        \npermissions\n:\n \n{\n\n            \ngetPermissions\n:\n \n[{\n\n                \ntype\n:\n \nKEY\n,\n\n                \nkeyNumber\n:\n \nKEY_1\n\n            \n},\n\n            \n{\n\n                \ntype\n:\n \nKEY\n,\n\n                \nkeyNumber\n:\n \nKEY_4\n\n            \n}],\n\n            \nputPermissions\n:\n \n[{\n\n                \ntype\n:\n \nKEY\n,\n\n                \nkeyNumber\n:\n \nKEY_4\n\n            \n}]\n\n        \n},\n\n        \ndataObjects\n:\n \n[{\n\n            \ntag\n:\n \nFF00\n,\n\n            \ndata\n:\n \n3062810100A41D300981029400040301000004103AC3FD8364C1A44A219C23DFC144C715A50B3009810294000403010000A609810294000403010000A7128510CDE93D03FF1A1BDE9829F194BE39074AA9120410325FA33B87684001F9E5F9D0C4BA01A20500\n\n        \n}]\n\n    \n}]\n\n\n}\n\n\n}\n\n\n\n\n\n\n\nCard side test key\n\n\nTest key with AKE data on KEY 4. Tag FF00 is readable and writeable after authenticating using the AKE key to the Terminal key above.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n{\n\n\nendpointId\n:\n \n3342274\n,\n\n\nseosData\n:\n \n{\n\n    \noid\n:\n \n0202020202020202\n,\n\n    \ndiversifier\n:\n \n049668A1761B80\n,\n\n    \naccessListPermissions\n:\n \n{\n\n        \ngetPermissions\n:\n \n[],\n\n        \nputPermissions\n:\n \n[]\n\n    \n},\n\n    \nkeysetObjectAccessGroups\n:\n \n[{\n\n        \nputPermissions\n:\n \n[],\n\n        \nkeysetObjects\n:\n \n[{\n\n            \ntype\n:\n \nPRIVACY\n,\n\n            \ncontact\n:\n \ntrue\n,\n\n            \ncontactless\n:\n \ntrue\n,\n\n            \nkeyData\n:\n \n{\n\n                \ntype\n:\n \nVALUES\n,\n\n                \nmacKey\n:\n \n8aa83bf8cbda10620bc1bf19fbb6cd58\n,\n\n                \nencKey\n:\n \n5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A\n\n            \n},\n\n            \nkeyNumber\n:\n \nKEY_0\n\n        \n},\n\n        \n{\n\n            \ntype\n:\n \nAUTHENTICATION\n,\n\n            \ncontact\n:\n \ntrue\n,\n\n            \ncontactless\n:\n \ntrue\n,\n\n            \noptional\n:\n \nfalse\n,\n\n            \nkeyData\n:\n \n{\n\n                \ntype\n:\n \nVALUES\n,\n\n                \nmacKey\n:\n \nF5582EADD895225DC71D080E19338A25\n,\n\n                \nencKey\n:\n \nE0F75D03506A735C93DF39113D18532F\n\n            \n},\n\n            \nkeyNumber\n:\n \nKEY_1\n\n        \n},\n\n        \n{\n\n            \ntype\n:\n \nAUTHENTICATION\n,\n\n            \ncontact\n:\n \ntrue\n,\n\n            \ncontactless\n:\n \ntrue\n,\n\n            \noptional\n:\n \nfalse\n,\n\n            \nkeyData\n:\n \n{\n\n                \ntype\n:\n \nVALUES\n,\n\n                \nmacKey\n:\n \n11bdb88e534ff02ca4e77e858dccd37e\n,\n\n                \nencKey\n:\n \n269c555f45bf3ee0095ea1e385713131\n\n            \n},\n\n            \nkeyNumber\n:\n \nKEY_2\n\n        \n},\n\n        \n{\n\n            \ntype\n:\n \nAKE\n,\n\n            \nkeyNumber\n:\n \nKEY_4\n,\n\n            \ncontact\n:\n \ntrue\n,\n\n            \ncontactless\n:\n \ntrue\n,\n\n            \nkeyData\n:\n \n{\n\n                \ntype\n:\n \nVALUES\n,\n\n                \nprivatePoint\n:\n \n31B436FDBDA5531273F1068570608CBF084BB7D8B67357D9C575F1612A10BA13\n\n            \n},\n\n            \ncertificate\n:\n \n7F21819A7F4E54420233447F494D06082A8648CE3D0301078641041025822DD4EB00690A23FFD0A793DB0B6131C166226C40D921815CEC3C62C26836234FE1592A5F28DBF6D6188CB021C8494699614ABC6B14CC27AABFDD21D0475F37403BC992EBECEF66F2147D92C4AEFD2E5C276F23D3FFA700628FBE49B90C998686C184A948C6542FD8B68B156B044543C2B5BA7E492CF063F2F1596C6E5566CEE5\n,\n\n            \nifdRootPublicKey\n:\n \n04DFB451969695155780105573C9AEA05ADE67E5242ECAFF959AE81FC7F7B52247030BCF9189524138DDB98F3082DA101AE607C1C3BDB3DA1A874A0D6E4A82A737\n,\n\n          \nterminalPermissions\n:\n \n[{\n\n              \ntype\n:\n \nINTERFACE\n,\n\n              \nvalue\n:\n \nALWAYS_ACCESS\n\n          \n}]\n\n        \n}]\n\n    \n}],\n\n    \nmetadata\n:\n \n{\n\n        \nlabel\n:\n \nCard Seos\n,\n\n        \nissuer\n:\n \n01\n,\n\n        \ntype\n:\n \nLEGACY\n,\n\n        \npermissions\n:\n \n{\n\n            \ngetPermissions\n:\n \n[],\n\n            \nputPermissions\n:\n \n[]\n\n        \n},\n\n      \nadditionalFields\n:[]\n\n    \n},\n\n    \ndataObjectAccessGroups\n:\n \n[{\n\n        \npermissions\n:\n \n{\n\n            \ngetPermissions\n:\n \n[{\n\n                \ntype\n:\n \nKEY\n,\n\n                \nkeyNumber\n:\n \nKEY_1\n\n            \n},\n\n            \n{\n\n                \ntype\n:\n \nKEY\n,\n\n                \nkeyNumber\n:\n \nKEY_4\n\n            \n}],\n\n            \nputPermissions\n:\n \n[{\n\n                \ntype\n:\n \nKEY\n,\n\n                \nkeyNumber\n:\n \nKEY_4\n\n            \n}]\n\n        \n},\n\n        \ndataObjects\n:\n \n[{\n\n            \ntag\n:\n \nFF00\n,\n\n            \ndata\n:\n \n3062810100A41D300981029400040301000004103AC3FD8364C1A44A219C23DFC144C715A50B3009810294000403010000A609810294000403010000A7128510CDE93D03FF1A1BDE9829F194BE39074AA9120410325FA33B87684001F9E5F9D0C4BA01A20500\n\n        \n}]\n\n    \n}]\n\n\n}\n\n\n}", 
            "title": "AKE session setup"
        }, 
        {
            "location": "/seos-access-api-samples/ake-session-setup/index.html#overview-of-the-code", 
            "text": "Setup privacy keys using the test vectors (same as in the json keys below)  Open a session to the Mobile Access SDK default MobileKeysSeosProvider  This instance of Seos is expected to have the \"Terminal side test key\"  Setup the custom Card Connection (not provided by the example code)  This instance of Seos is expected to have the \"Card side test key\"  Establish a connection to the Card by utilizing the already connected Terminal Connection MobileKeysSeosProvider  Read Tag FF00 from the Card  Close the connection", 
            "title": "Overview of the code"
        }, 
        {
            "location": "/seos-access-api-samples/ake-session-setup/index.html#java-sample-code-for-setting-up-a-card-session", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61      private   void   doTerminalAke ( SeosConnection   cardSeosConnection )   throws   MobileKeysException \n         { \n\n             Session   session   =   null ; \n             try \n             { \n                 //replace this with your reference of the MobileKeys object \n                 MobileKeys   mobileKeys   =   MobileKeysImpl . this ; \n                 //openSeosAccessApiSession() opens a session to the local seos on device \n                 session   =   mobileKeys . openSeosAccessApiSession ( new   SessionParameters . Builder () \n                         . setPrivacyKeyset ( new   PlainPrivacyKeyset ( KeyNumber . KEY_0 , \n                                 HexUtils . toBytes ( Terminal privacy enc key here ), \n                                 HexUtils . toBytes ( Terminal privacy mac key here ))) \n                         //ADF from iOS SDK documentation has no authentication but you should put the appropriate values here to enable local secure messaging \n                         . setAuthenticationKeyset ( new   PlainAuthenticationKeyset ( KeyNumber . KEY_1 ,   false ,   HexUtils . toBytes ( Appropriate terminal auth enc key here ),   HexUtils . toBytes ( Appropriate terminal auth mac key here ))) \n                         . setSelection ( Select . selectAdf ( new   Oid ( HexUtils . toBytes ( OID of terminal ADF with AKE keyset object )))) \n                         . build ()); \n\n                 SessionParameters   cardSessionParameters   =   new   SessionParameters . Builder () \n                         . setPrivacyKeyset ( new   PlainPrivacyKeyset ( KeyNumber . KEY_0 , \n                                 HexUtils . toBytes ( Card privacy enc key here ), \n                                 HexUtils . toBytes ( Card privacy mac key here ))) \n                         //You don t need to set an authentication keyset here as this is replaced by AKE. \n                         . setSelection ( Select . selectAdf ( new   Oid ( HexUtils . toBytes ( OID of card ADF with AKE keyset object )))) \n                         . build (); \n                 CommandResult Session   commandResult   =   session . execute ( Commands . authenticatedKeyExchangeInTerminalMode ( \n                         new   TerminalAkeParameters . Builder () \n                                 . setCardSessionParameters ( cardSessionParameters ) \n                                 . setCardGlobalKey ( false ) \n                                 . setCardKeyNumber ( KeyNumber . KEY_4 ) \n                                 . setTerminalGlobalKey ( false ) \n                                 . setTerminalKeyNumber ( KeyNumber . KEY_4 ) \n                                 . setCardSeosConnection ( cardSeosConnection ) \n                                 . build () \n                 )); \n\n\n                 if   ( commandResult . hasResponseData ()) \n                 { \n                     Session   cardSession   =   commandResult . responseData (); \n                     //We are ready to read stuff from cardSession \n\n                 } \n                 else \n                 { \n                     //failed \n                 } \n\n             } \n             catch   ( SessionException   e ) \n             { \n                 throw   new   IllegalStateException ( Failed to establish session ,   e ); \n             } \n             finally \n             { \n                 if   ( session   !=   null ) \n                 { \n                     session . close (); \n                 } \n             } \n         }", 
            "title": "Java sample code for setting up a Card session"
        }, 
        {
            "location": "/seos-access-api-samples/ake-session-setup/index.html#terminal-side-test-key", 
            "text": "Terminal test key with AKE data on KEY 4.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95 {  endpointId :   3342568 ,  seosData :   { \n     oid :   0202020202020202 , \n     diversifier :   049668A1761B80 , \n     accessListPermissions :   { \n         getPermissions :   [], \n         putPermissions :   [] \n     }, \n     keysetObjectAccessGroups :   [{ \n         putPermissions :   [], \n         keysetObjects :   [{ \n             type :   PRIVACY , \n             contact :   true , \n             contactless :   true , \n             keyData :   { \n                 type :   VALUES , \n                 macKey :   8aa83bf8cbda10620bc1bf19fbb6cd58 , \n                 encKey :   5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A \n             }, \n             keyNumber :   KEY_0 \n         }, \n         { \n             type :   AUTHENTICATION , \n             contact :   true , \n             contactless :   true , \n             optional :   false , \n             keyData :   { \n                 type :   VALUES , \n                 macKey :   F5582EADD895225DC71D080E19338A25 , \n                 encKey :   E0F75D03506A735C93DF39113D18532F \n             }, \n             keyNumber :   KEY_1 \n         }, \n         { \n             type :   AUTHENTICATION , \n             contact :   true , \n             contactless :   true , \n             optional :   false , \n             keyData :   { \n                 type :   VALUES , \n                 macKey :   11bdb88e534ff02ca4e77e858dccd37e , \n                 encKey :   269c555f45bf3ee0095ea1e385713131 \n             }, \n             keyNumber :   KEY_2 \n         }, \n         { \n             type :   AKE , \n             keyNumber :   KEY_4 , \n             contact :   true , \n             contactless :   true , \n             keyData :   { \n                 type :   VALUES , \n                 privatePoint :   79578FC9F2A7CD688D86E3FA272489B7CF2CF7A5DB6589D0F320CC43D15612A3 \n             }, \n             certificate :   7F21819A7F4E54420211227F494D06082A8648CE3D030107864104B95C24D84E3F88652B2984C737771126F92809E23E08AA70376683C6035EAEB0A89746181E1F956BBF8CD8D21883E37A0D9FAE452732EBDD578E521900AC2BF35F3740AB03CE6554C4774847DD703439488D632E75E7A00D86CB61A9F4A25CACAA89CE5C9820ABDF0F69DB6A43967C92CC66662045D0B178DDABF309D1195464A3C89E , \n             ifdRootPublicKey :   04B16BA7C60B2811FB8BAD86400189BBB695EA2D9801D610F0A125CBEC6D86F96ECF3EE259A4FF27D7DABF294ADF27F1DB507A93B5DB33BA666E75D1AD46668EF8 , \n           terminalPermissions :   [{ \n               type :   INTERFACE , \n               value :   ALWAYS_ACCESS \n           }] \n         }] \n     }], \n     metadata :   { \n         label :   Terminal Seos , \n         issuer :   01 , \n         type :   LEGACY , \n         permissions :   { \n             getPermissions :   [], \n             putPermissions :   [] \n         }, \n       additionalFields :[] \n     }, \n     dataObjectAccessGroups :   [{ \n         permissions :   { \n             getPermissions :   [{ \n                 type :   KEY , \n                 keyNumber :   KEY_1 \n             }, \n             { \n                 type :   KEY , \n                 keyNumber :   KEY_4 \n             }], \n             putPermissions :   [{ \n                 type :   KEY , \n                 keyNumber :   KEY_4 \n             }] \n         }, \n         dataObjects :   [{ \n             tag :   FF00 , \n             data :   3062810100A41D300981029400040301000004103AC3FD8364C1A44A219C23DFC144C715A50B3009810294000403010000A609810294000403010000A7128510CDE93D03FF1A1BDE9829F194BE39074AA9120410325FA33B87684001F9E5F9D0C4BA01A20500 \n         }] \n     }]  }  }", 
            "title": "Terminal side test key"
        }, 
        {
            "location": "/seos-access-api-samples/ake-session-setup/index.html#card-side-test-key", 
            "text": "Test key with AKE data on KEY 4. Tag FF00 is readable and writeable after authenticating using the AKE key to the Terminal key above.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95 {  endpointId :   3342274 ,  seosData :   { \n     oid :   0202020202020202 , \n     diversifier :   049668A1761B80 , \n     accessListPermissions :   { \n         getPermissions :   [], \n         putPermissions :   [] \n     }, \n     keysetObjectAccessGroups :   [{ \n         putPermissions :   [], \n         keysetObjects :   [{ \n             type :   PRIVACY , \n             contact :   true , \n             contactless :   true , \n             keyData :   { \n                 type :   VALUES , \n                 macKey :   8aa83bf8cbda10620bc1bf19fbb6cd58 , \n                 encKey :   5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A \n             }, \n             keyNumber :   KEY_0 \n         }, \n         { \n             type :   AUTHENTICATION , \n             contact :   true , \n             contactless :   true , \n             optional :   false , \n             keyData :   { \n                 type :   VALUES , \n                 macKey :   F5582EADD895225DC71D080E19338A25 , \n                 encKey :   E0F75D03506A735C93DF39113D18532F \n             }, \n             keyNumber :   KEY_1 \n         }, \n         { \n             type :   AUTHENTICATION , \n             contact :   true , \n             contactless :   true , \n             optional :   false , \n             keyData :   { \n                 type :   VALUES , \n                 macKey :   11bdb88e534ff02ca4e77e858dccd37e , \n                 encKey :   269c555f45bf3ee0095ea1e385713131 \n             }, \n             keyNumber :   KEY_2 \n         }, \n         { \n             type :   AKE , \n             keyNumber :   KEY_4 , \n             contact :   true , \n             contactless :   true , \n             keyData :   { \n                 type :   VALUES , \n                 privatePoint :   31B436FDBDA5531273F1068570608CBF084BB7D8B67357D9C575F1612A10BA13 \n             }, \n             certificate :   7F21819A7F4E54420233447F494D06082A8648CE3D0301078641041025822DD4EB00690A23FFD0A793DB0B6131C166226C40D921815CEC3C62C26836234FE1592A5F28DBF6D6188CB021C8494699614ABC6B14CC27AABFDD21D0475F37403BC992EBECEF66F2147D92C4AEFD2E5C276F23D3FFA700628FBE49B90C998686C184A948C6542FD8B68B156B044543C2B5BA7E492CF063F2F1596C6E5566CEE5 , \n             ifdRootPublicKey :   04DFB451969695155780105573C9AEA05ADE67E5242ECAFF959AE81FC7F7B52247030BCF9189524138DDB98F3082DA101AE607C1C3BDB3DA1A874A0D6E4A82A737 , \n           terminalPermissions :   [{ \n               type :   INTERFACE , \n               value :   ALWAYS_ACCESS \n           }] \n         }] \n     }], \n     metadata :   { \n         label :   Card Seos , \n         issuer :   01 , \n         type :   LEGACY , \n         permissions :   { \n             getPermissions :   [], \n             putPermissions :   [] \n         }, \n       additionalFields :[] \n     }, \n     dataObjectAccessGroups :   [{ \n         permissions :   { \n             getPermissions :   [{ \n                 type :   KEY , \n                 keyNumber :   KEY_1 \n             }, \n             { \n                 type :   KEY , \n                 keyNumber :   KEY_4 \n             }], \n             putPermissions :   [{ \n                 type :   KEY , \n                 keyNumber :   KEY_4 \n             }] \n         }, \n         dataObjects :   [{ \n             tag :   FF00 , \n             data :   3062810100A41D300981029400040301000004103AC3FD8364C1A44A219C23DFC144C715A50B3009810294000403010000A609810294000403010000A7128510CDE93D03FF1A1BDE9829F194BE39074AA9120410325FA33B87684001F9E5F9D0C4BA01A20500 \n         }] \n     }]  }  }", 
            "title": "Card side test key"
        }
    ]
}